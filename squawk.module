<?php
/*
 * Last update 19 Oct.
 * Moving user/stuff to channels/stuff
 *
 */

/*
 *  implements hook_menu
 */
 /*
  node/add/<nodetype>
 */
function squawk_menu() {
   $items['frontpage'] = array(
    'page callback' => 'squawk_frontpage',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['channels/%user'] = array(
    'title' => t('Me'),
    'title callback' => 'squawk_channels_page_title',
    'title arguments' => array(1),
    'page callback' => 'squawk_view_updates',
    'page arguments' => array(1),
//    'access callback' => TRUE,
    'access callback' => 'squawk_relationship_exists',
    'access arguments' => array(1),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'squawk.pages.inc',
  );

  $items['channels/%user/news'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'News',
    //'access callback' => 'squawk_relationship_exists',
    //'access arguments' => array(1),
    'weight' => 1,
  );
  //this is new. This is for the Update node type
  $items['channels/%user/private'] = array(
    'title' => 'Private',
    'description' =>
      'Updates marked \'private.\' Only you and the specific author can see them.',
    'page callback' => 'squawk_view_updates',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'file' => 'squawk.pages.inc',
    'weight' => 2,
  );
  $items['channels/%user/archive'] = array(
    'title' => 'Archive',
    'description' =>
      'The storage bin.',
    'page callback' => 'squawk_view_updates',
    'page arguments' => array(1, 2),
    'access callback' => 'viewing_own_channel',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'squawk.pages.inc',
    'weight' => 3,
  );

  //11 April 2013. For Mary V.--uncommented in dev
/*  $items['channels/%user/stream'] = array(
    'title' => 'Stream',
    'description' => 'All channel content',
    'page callback' => 'squawk_view_updates',
    'page arguments' => array(1, 2),
    'access callback' => 'viewing_own_channel',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'squawk.pages.inc',
    'weight' => 4,
  );
*/
   // Going to be the default front page and login pages.
  $items['channels'] = array(
    'title' => 'Welcome to Squawk!',
    'title callback' => 'squawk_channels_menu_title',
    'page callback' => 'squawk_channels_page',
    'access callback' => TRUE,
    'file' => 'squawk.pages.inc',
    'weight' => -10,
  );
  //this is new. This is for the Update node type
  $items['channels/%/update/add'] = array(
    'title' => 'Post an Update',
    'description' =>
      'Post an update on this person\'s channel.',
    'page callback' => 'squawk_open_update',
    'page arguments' => array(1,3),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 8,
  );
  $items['channels/%user/profile/tags'] = array(
    'title' => 'Filters/Tags',
    'description' => 'Manage tags and filters',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('manage_tags_form', 1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'weight' => 4,
  );
  $items['channels/%user/profile/tags/add'] = array(
    'title' => 'Add New Tag',
    'description' => 'Add a new tag',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('add_new_tag_form', 1),
    'access callback' => TRUE,
    'file' => 'squawk.pages.inc',
  );
  $items['channels/%user/profile'] = array(
    'title' => 'My Profile',
    'description' => 'Edit your user profile',
    'type' => MENU_CALLBACK,
    //'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_profile_form', 1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'weight' => 5,
  );
  $items['reports'] = array(
    'title' => 'Direct Reports',
    'page callback' => 'squawk_relationships_themed',
    'page arguments' => array( 'reports'),
    'access callback' => 'squawk_rel_menu_access',
    'access arguments' => array('reports'),
    //'access callback' => TRUE,
    //'menu_name' => 'squawk-menu',
    'type' => MENU_CALLBACK,
  );
  $items['leads'] = array(
    'title' => 'Leaders',
    'page callback' => 'squawk_relationships_themed',
    'page arguments' => array('leads'),
    'access callback' => 'squawk_rel_menu_access',
    'access arguments' => array('leads'),
    //'menu_name' => 'squawk-menu',
    'type' => MENU_CALLBACK,
  );

  $items['peers'] = array(
    'title' => 'Peers',
    'page callback' => 'squawk_relationships_themed',
    'page arguments' => array('peers'),
    'access callback' => 'squawk_rel_menu_access',
    'access arguments' => array('peers'),
    'type' => MENU_CALLBACK,
  );

  $items['node/%node/back'] = array(
    'title' => 'Back',
    'description' => 'Return to the person\'s channel.',
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'squawk_back',
    'page arguments' => array(1),
  );
  $items['channels/unread/%node'] = array(
    'title' => 'Mark as Unread.',
    'description' => 'Mark update as new',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'page callback' => 'tag_as_new',
    'page arguments' => array(2),
  );
  $items['channels/archive/%node'] = array(
    'title' => 'Archived.',
    'description' => 'Move update to the archive',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'page callback' => 'archive_update',
    'page arguments' => array(2),
  );
  $items['channels/node/%node'] = array(
    'title' => 'Read',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'node_view',
    'page arguments' => array(2),
    //'page callback' => 'drupal_get_form',
    //'page arguments' => array('display_update_form',2),
    //'file' => 'squawk_forms.inc',
  );
  $items['channels/node/%node/read'] = array(
    'title' => 'Read',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 2,
  );
  $items['channels/node/%/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_CALLBACK,
    'description' => t('Edit a node if you\'re the recipient.'),
    'page callback' => 'squawk_open_update',
    'page arguments' => array(2, 'edit'),
    'access callback' => true,
  );
  $items['channels/node/%node/back'] = array(
    'title' => 'Back to News',
    'description' => 'Return to the person\'s channel.',
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'squawk_back',
    'page arguments' => array(2),
    'weight' => 1,
  );
  $items['relationships/manage'] = array(
    'title' => 'Manage Relationships',
    'description' => 'Manage Relationships Between Users',
    'access callback' => TRUE,
    //'access callback' => 'user_access',
    //'access arguments' => array('create new users'),
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('manage_relationships_form'),
    'file' => 'squawk_forms.inc',
  );
  $items['ext/channels'] = array(
    //'title' => 'My Channels',
    'access arguments' => array('access external channels'),
    'type' => MENU_CALLBACK,
    'page callback' => 'my_channels',
    'file' => 'squawk.pages.inc',
  );
  $items['ext/channels/view'] = array(
    'title' => 'My Channels',
    //'access arguments' => array('access external channels'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    //'page callback' => 'my_channels',
    // 'file' => 'squawk.pages.inc',
    'weight' => 1,
  );
  $items['ext/channels/add'] = array(
    'title' => 'Add a New Channel',
    'access arguments' => array('access external channels'),
    //'type' => MENU_CALLBACK,
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('new_channel_form'),
    'file' => 'squawk_forms.inc',
    'weight' => 2,
  );
  $items['ext/channels/%taxonomy_term/edit'] = array(
    'title' => 'Edit Channel',
    'access callback' => 'channel_edit_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edit_channel_form', 2),
    'file' => 'squawk_forms.inc',
  );
  $items['taxonomy/term/%taxonomy_term/members'] = array(
    'title' => 'Members',
    'access arguments' => array('access external channels'),
    'type' => MENU_LOCAL_TASK,
    'weight' =>4,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('channel_members_form', 2),
    'file' => 'squawk_forms.inc',
  );
  $items['taxonomy/term/%taxonomy_term/files'] = array(
    'title' => 'Files',
    'access arguments' => array('access external channels'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('channel_files_form', 2),
    'file' => 'squawk_forms.inc',
  );
  $items['taxonomy/term/%taxonomy_term/update/add'] = array(
    'title' => 'Post an Update',
    'description' =>
      'Post an update on this channel.',
//    'page callback' => 'squawk_open_update',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('channel_update_add_form', 2),
    'access callback' => 'channel_members',
    'access arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'weight' => 6,
    'file' => 'squawk_forms.inc',
  );
  $items['ext/directory'] = array(
    'title' => 'Directory',
    'access callback' => true,
    'type' => MENU_CALLBACK,
    'page callback' => 'directory',
  );
  $items['ext/directory-two'] = array(
    'title' => 'Directory',
    'access callback' => true,
    'type' => MENU_CALLBACK,
    'page callback' => 'directory_two',
  );
  return $items;
}
/*
 * implements hook_init
 */

function squawk_init() {
  //this allows the user edit profile form to be well behaved.
  module_load_include('inc', 'user', 'user.pages');
  drupal_add_library('system', 'ui.dialog');
}
/*
 * implements hook_menu_alter
 */
function squawk_menu_alter(&$items) {

  $items['node/%node/edit']['title callback'] = 'squawk_node_edit_title_callback';
  $items['node/%node/edit']['title arguments'] = array(1);
  $items['taxonomy/term/%taxonomy_term']['access callback'] = 'channel_members';
  $items['taxonomy/term/%taxonomy_term']['access arguments'] = array(2);
  $items['taxonomy/term/%taxonomy_term']['page callback'] = 'squawk_channel_page';
  //$items['taxonomy/term/%taxonomy_term']['file'] = 'sites/all/modules/squawk/squawk_pages.inc';

  $items['taxonomy/term/%taxonomy_term']['page arguments'] = array(2);
  $items['taxonomy/term/%taxonomy_term/edit']['access callback'] = 'user_access';
  $items['taxonomy/term/%taxonomy_term/edit']['access arguments'] = array('administer users');


}

 /**
 * Implements hook_form_alter().
 */
function squawk_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'update_node_form') {
    $form_state['open_mode']='';
    //there are two cases where this form is called, create a new node and edit/forward an existing node.
    //the call state is tucked in the $form_state build_info args[1]
    if (!isset($form_state['build_info']['args'][1])) {
      //the drupal default edit tab has been clicked but there is no args1...but it is still an edit so
      //treat it that way.
      $form_state['open_mode'] = 'edit';
    }
    elseif (isset($form_state['build_info']['args'][2])) {
      $form_state['open_mode'] = $form_state['build_info']['args'][2];
    }
    else {

      $form_state['open_mode'] = 'edit';
      //dsm($form_state);
    }
    global $user;
    //add a container for the tags. Put an ajax button inside to add a tag to the set.
    $form['tagset'] = array(
      '#type' => 'container',
      '#weight' => 0,
      '#attributes' => array(
        'id' => 'tag-set',
      ),
    );
    $terms = squawk_fetch_user_tags($user->uid);
    $tag_default_value = array();
    //make sure it has a value. It should have.
    if(!empty($terms)) {
      foreach($terms['tag_set'] as $term) {
        if($term->field_active['und'][0]['value'] == TRUE) {
          //build the options array for the checkboxes control
          $options[$term->tid] = $term->name;
        }
      }
    }
    if ($options) {
        $form['field_tags']['und']['#options'] = $options;
    }
    $form['field_tags']['#printed'] = TRUE;
    $form['field_channels']['#printed'] = TRUE;
    $form['tagset']['add_tag_subform'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'id' => 'add-tag-subform',
      ),
    );
    $form['tagset']['tags'] = array(
      '#type' => 'checkboxes',
      '#title' => 'Tags',
      '#validated' => TRUE, //required because this can have content updated via ajax
      '#options' => _fetch_active_tag_options($user->uid),
      '#prefix' =>'<div id="active-user-tags">',
      '#suffix' => '</div>',
    );
    if (!isset($form_state['show_subform']) || $form_state['show_subform'] == FALSE) {
      $form['tagset']['add_tag_subform']['add_tag'] = array(
      '#type' => 'button',
      '#value' => t('Add Tag'),
      '#limit_validation_errors' => array(),
        '#ajax' => array(
          'callback' => '_show_tag_subform',
          //'wrapper' => 'add-tag-subform',
          'wrapper' => 'tag-set',
          'method' => 'replace',
        ),
      );

      $form_state['show_subform'] = TRUE;
    }
    else {
      $form['tagset']['add_tag_subform']['new_tag'] = array(
        '#type' => 'textfield',
        //'#prefix' => '<div id="new-tag-field" >',
        //'#suffix' => '</div>',
        '#title' => t('Tag Name'),
        '#title_display' => 'before',
        '#size' => 35,
      );
      $form['tagset']['add_tag_subform']['cancel'] = array(
      '#type' => 'button',
      '#value' => t('Cancel'),
      '#limit_validation_errors' => array(),
        '#ajax' => array(
          'callback' => '_cancel_tag_subform',
          //'wrapper' => 'add-tag-subform',
          'wrapper' => 'tag-set',
          'method' => 'replace',
        ),
      );
      $form['tagset']['add_tag_subform']['save'] = array(
      '#type' => 'button',
      '#value' => t('Save'),
      '#limit_validation_errors' => array(),
        '#ajax' => array(
          'callback' => '_save_tag_subform',
          'wrapper' => 'tag-set',
          'method' => 'replace',
        ),
      );
      $form_state['show_subform'] = FALSE;
    }
    $a = user_load($user->uid);
    $form['field_author_surname']['und'][0]['value'] = array(
      '#type' => 'value',
      '#value' => $a->field_last_name['und'][0]['value'],
    );
    //don't show the mentions field for input.
    $form['field_mentions']['und']['#type']='value';
    $form['field_channels']['und']['#type'] = 'value';
    switch ($form_state['open_mode']) {
      case 'add':
        //$form_state['show_subform'] = FALSE;
        $options = array();
        variable_set('node_preview_test_update', 0);
        //the zeroth argument in $form_state['build_info']['args'] should be the current user
        //the first argument should be the recipient user (where we are)
        //test setting a default value in this code hook
        //$form['field_recipient']['und'][0]['value']['#default_value'] = $form_state['build_info']['args'][1];
        //$form['field_recipient']['#disabled'] = TRUE;

        $form['field_recipient']['und'][0]['value']['#type']='value';
        $form['field_recipient']['und'][0]['value']['#value'] = $form_state['build_info']['args'][1];
        //need to check whether or not the sender has an org relationship with the recipient. If so, then continue.
        //if not, then set the private field to true and dismiss the forwarding stuff...or at least warn.
        $bonus_receivers_title = t('Copy this to myself or other colleagues:');
        $org_rel_exists = squawk_relationship_exists(user_load($form_state['build_info']['args'][1]));
        if(!$org_rel_exists) {
          $form['field_private']['und']['#disabled'] = TRUE;
          $form['field_private']['und']['#default_value'] = TRUE;
          $bonus_receivers_title = t('Copy this to myself or other colleagues: NOTE--this update is marked as \'Private\'.');
        }
        $form['field_archived']['und']['#type']='value';
        $form['field_archived']['und']['#value'] = 0;
        //set the default title to the date/time and the sender
        $form['title']['#default_value'] = 'New Update';
        $form['title']['#attributes'] = array(
          'class' => array('default-value'),
        );
        $form['title']['#attached']['js'] = array(
          drupal_get_path('module', 'squawk') . '/scripts/default-value.js',
        );
        //Keep the previous content fields from displaying on the add form.
        $form['field_previous_author']['#printed']=TRUE;
        $form['field_previous_content']['#printed']=TRUE;
        $form['field_previous_title']['#printed']=TRUE;
        $form['field_previous_tags']['#printed']=TRUE;
        break;
      case 'edit':
        //dsm($form);
        //hide the recipient
        $recipient = $form['field_recipient']['und'][0]['value']['#default_value'];
        //now change the type of the control
        $form['field_recipient']['und'][0]['value']['#type']='value';
        //$form['field_recipient']['und'][0]['value']['#value'] = $form_state['build_info']['args'][1];
        $form['field_recipient']['und'][0]['value']['#value'] = $recipient;
        $form['field_archived']['und']['#type']='value';
        $form['field_archived']['und']['#value'] = 0;

        //we need to find the current update cardinality. All the 'previous' fields are always updated with values,
        //so they should all be populated up to the same index. this looks unlimited but in practice will not be very high.
        $cardinality=0;
        for ($i = 0; $i <= 100; $i++) {
          if(!isset($form['field_previous_author']['und'][$i])) {
            //dsm($cardinality);
            break;
          }
          else {
            $cardinality = $i;
          }
        }
        $form['original_content'] = array(
          '#attributes' => array(
            'id' => 'original-content-header',
          ),
          '#type' => 'fieldset',
          '#collapsible' => TRUE,
          '#collapsed' => FALSE,
          '#title' => 'Previous Update(s):',
          '#weight' => 15,
          '#disabled' => FALSE,
        );
        //now suppose this is the first update. The $cardinality should be 0
        //bump the current values to the previous field values at the appropriate index.
        //then assign items to various divs for each update.
        $form['field_previous_author']['#printed']=TRUE;
        $form['field_previous_content']['#printed']=TRUE;
        $form['field_previous_title']['#printed']=TRUE;
        $form['field_previous_tags']['#printed']=TRUE;
        $form['field_mentions']['#printed'] = TRUE;

        //begin set the previous data field values.
        $form['field_previous_author']['und'][$cardinality]['value']['#default_value']=format_username(user_load($form['#node']->uid)) .
          ' (' . date('D M j g:i a', $form['#node']->changed) . ')';
        //$form['field_previous_title']['und'][$cardinality]['value']['#type']='value';
        $form['field_previous_title']['und'][$cardinality]['value']['#default_value']= $form['title']['#default_value'];
        //$form['field_previous_content']['und'][$cardinality]['value']['#type']='value';
        $form['field_previous_content']['und'][$cardinality]['#default_value']=$form['body']['und'][0]['#default_value'];
        $pterms = array();
        //dsm($form['#node']['field_tags']);
        if(isset($form['#node']->field_tags['und'])) {
          foreach($form['#node']->field_tags['und'] as $varray) {
            $pterm = taxonomy_term_load($varray['tid']);
            $pterms[] = $pterm->name;
          }
        }
        //$form['field_previous_tags']['und'][$cardinality]['value']['#type']='value';
        $form['field_previous_tags']['und'][$cardinality]['value']['#default_value'] = (count($pterms)==0) ? '<none>' : drupal_implode_tags($pterms);
        //for($n = 0; $n <= $cardinality; $n++) {
        for ($n = $cardinality; $n >= 0; $n--) {
          $form['original_content'][$n]['details'] = array(
            '#item' => 'container',
            '#attributes' => array(
              'class' => array("previous-content"),
            ),
          );
          $form['original_content'][$n]['details']['title'] = array(
            '#type' => 'item',
            '#markup' => '<h3 class="previous-content-title">' . $form['field_previous_title']['und'][$n]['value']['#default_value'] . '</h3>',
            '#weight' => 1,
          );
          $form['original_content'][$n]['details']['author'] = array(
            '#type' => 'item',
            '#markup' => '<div class="previous-author"><label>From: </label>' .
              $form['field_previous_author']['und'][$n]['value']['#default_value'] . '</div>',
            '#weight' => 2,
          );
          $form['original_content'][$n]['details']['content'] = array(
            '#type' => 'item',
            //'#markup' => '<p class="previous-content-body">' . $form['field_previous_content']['und'][$n]['value']['#default_value'] . //'</p>',
            '#markup' => '<p class="previous-content-body">' . $form['field_previous_content']['und'][$n]['#default_value'] . '</p>',
            '#weight' => 3,
            );
          $form['original_content'][$n]['details']['tags'] = array(
            '#prefix' => '<div class="previous-content-tags"><label>Tagged As: </label>',
            '#suffix' => '</div>',
            '#theme' => 'item_list',
            '#type' => 'ul',
            '#items' => explode(',',$form['field_previous_tags']['und'][$n]['value']['#default_value']),
            '#weight' => 4,
          );
        }

        $author = user_load($form['#node']->uid);
        $author_name = format_username($author);
        $date = date('D M j g:i a', $form['#node']->changed);
        $form_state['new_author'] = TRUE;
        if (substr($form['title']['#default_value'],0,4) != 'FWD:') {
          //This title has not already been forwarded once so add an indicator. Otherwise leave it be.
          $form['title']['#default_value'] = 'FWD: ' . $form['title']['#default_value'];
        }
        //clear out the body
        $form['body']['und'][0]['#default_value'] = "";
        //}
        //show the tags that have been selected already
        $form['tagset']['tags']['#default_value']=$form['field_tags']['und']['#default_value'];

        //if it is opened as edit/forward, or 'edit',
        /* If it is opened as edit or edit/forward, the tags need to be recast into the vocabulary of the viewer.
         * If the viewer's tags don't include a particular sender tag, add the user name of the tagger into the tag text
         * separated by a colon or in parens or something. Maybe a situational link to add this to the viewer's tagset can
         * be provided.
        */
        $terms = squawk_fetch_user_tags($user->uid);
        $options = array();
        //make sure it has a value. It should have.
        if(!empty($terms)) {
          foreach($terms['tag_set'] as $term) {
            if($term->field_active['und'][0]['value'] == TRUE) {
              //build the options array for the checkboxes control
              $options[$term->tid] = $term->name;
            }
          }
        }
        $source = squawk_fetch_tag_list($form['field_tags']['und']['#default_value']);
        $result = squawk_compare_tag_lists($options,
          $source, $author_name);
        //$form['field_tags']['#disabled'] = FALSE;
        $form['field_tags']['und']['#options'] = $options + $result['residue'];
        //dsm($result);
        //default value is just an array of the keys
        $form['field_tags']['und']['#default_value'] = array_keys($result['intersection'] + $result['residue']);
      unset($form['actions']['delete']);
      $bonus_receivers_title = t('Copy this to myself or other colleagues:');
      $org_rel_exists = squawk_relationship_exists(user_load($recipient));
      if(!$org_rel_exists) {
        $form['field_private']['und']['#disabled'] = TRUE;
        $form['field_private']['und']['#default_value'] = TRUE;
        $bonus_receivers_title = t('Copy this to myself or other colleagues: NOTE--this update is marked as \'Private\'.');
      }
      break;
      default:
        drupal_set_message('This is an error condition. If you see this let tom b know.', 'error');
    }
    //rename the submit button]
    $form['actions']['submit']['#value'] = t('Tell It!');
    $form['actions']['submit']['#submit'][] = 'squawk_update_update';
    //Add the bonus receivers fieldset

    $form['bonus_receivers'] = array(
      '#type' => 'fieldset',
      '#title' => $bonus_receivers_title,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 50,
    );
    //get the lists of peers, leads, and reports the author has
    $peers = squawk_relationships($user->uid,'peers','human');
    $leads = squawk_relationships($user->uid,'leads','human');
    $reports = squawk_relationships($user->uid,'reports','human');
    drupal_add_js(drupal_get_path('module', 'squawk') . '/scripts/select-all.js');
    if(!empty($peers)) {
      $sort_key = array();
      foreach($peers as $key=>$name) {
        //skip the recipient
        if ($key != $form['field_recipient']['und'][0]['value']['#value']) {
          $peerlist[$key] = array($name['human_name'], $name['uid']);
          $sort_key[$key] = $name['sort_key'];
        }
      }
      if (isset($peerlist)) {
        array_multisort($sort_key, SORT_ASC, $peerlist);
        foreach($peerlist as $key=>$row) {
          $peeropts[$row[1]] = $row[0];
        }
        //there is at least one peer beyond the current recipient
        $form['bonus_receivers']['peers'] = array(
          '#type' => 'fieldset',
          '#prefix' => '<div id="peers">',
          '#suffix' => '</div>',
          '#weight' => 2,
        );
        $form['bonus_receivers']['peers']['all_peers'] = array(
          '#type' => 'checkbox',
          '#title' => 'Peers',
          '#weight' => 1,
          '#attributes' => array(
            'id' => 'edit-all-peers',
            'class' => array( 'select-all', 'peers' ),
          ),
        );
        $form['bonus_receivers']['peers']['peer_set'] = array(
          '#type' => 'checkboxes',
          '#multiple' => TRUE,
          '#options' => $peeropts,
          //'#options' => $peerlist,
          '#weight' => 2,
          //'#default_value' => array_keys($peerlist),
          '#attributes' => array(
            'class' => array( 'peer-checkbox' ),
          ),
        );
      }
    }
    if(!empty($reports)) {
      $sort_key = array();
      foreach($reports as $key=>$name) {
        //skip the recipient
        if ($key != $form['field_recipient']['und'][0]['value']['#value']) {
          $reportlist[$key] = array($name['human_name'], $name['uid']);
          $sort_key[$key] = $name['sort_key'];
        }
      }

      if (isset($reportlist)) {
        array_multisort($sort_key, SORT_ASC, $reportlist);
        foreach($reportlist as $key=>$row) {
          $reportopts[$row[1]] = $row[0];
        }       //there is at least one report beyond the recipient
        $form['bonus_receivers']['reports'] = array(
          '#type' => 'fieldset',
          '#prefix' => '<div id="reports">',
          '#suffix' => '</div>',
          '#weight' => 3,
        );
        $form['bonus_receivers']['reports']['all_reports'] = array(
          '#type' => 'checkbox',
          '#title' => 'Reports',
          '#weight' => 1,
          '#attributes' => array(
            'id' => 'edit-all-reports',
            'class' => array( 'select-all', 'reports' ),
          ),
        );
        $form['bonus_receivers']['reports']['report_set'] = array(
          '#type' => 'checkboxes',
          '#multiple' => TRUE,
          //'#options' => $reportlist,
          '#options' => $reportopts,
          '#weight' => 2,
          //'#default_value' => array_keys($reportlist),
          '#attributes' => array(
            'class' => array( 'report-checkbox' ),
          ),
        );
      }
    }
    if(!empty($leads)) {
      $sort_key = array();
      foreach($leads as $key=>$name) {

        //there is at least one report beyond the recipient
        //skip the recipient
        if ($key != $form['field_recipient']['und'][0]['value']['#value']) {
          $leadlist[$key] = array($name['human_name'], $name['uid']);
          $sort_key[$key] = $name['sort_key'];
        }
      }

      if (isset($leadlist)) {
        array_multisort($sort_key, SORT_ASC, $leadlist);
        foreach($leadlist as $key=>$row) {
          $leadopts[$row[1]] = $row[0];
        }
        //there is at least one entry other than the recipient
        $form['bonus_receivers']['leads'] = array(
          '#type' => 'fieldset',
          '#prefix' => '<div id="leads">',
          '#suffix' => '</div>',
          '#weight' => 1,
        );
        $form['bonus_receivers']['leads']['all_leads'] = array(
          '#type' => 'checkbox',
          '#title' => 'Leads',
          '#weight' => 1,
          '#attributes' => array(
            'id' => 'edit-all-leads',
            'class' => array( 'select-all', 'leads' ),
          ),
        );
        $form['bonus_receivers']['leads']['lead_set'] = array(
          '#type' => 'checkboxes',
          '#multiple' => TRUE,
          '#options' => $leadopts,
          '#weight' => 2,
          //'#default_value' => array_keys($leadlist),
          '#attributes' => array(
            'class' => array( 'lead-checkbox' ),
          ),
        );
      }
    }
    $form['bonus_receivers']['self'] = array(
      '#type' => 'checkbox',
      '#title' => 'Self',
      '#default_value' => 0,
      '#return_value' => $user->uid,
      '#weight' => 4,
    );
  dsm($form);
  dsm($form_state);

  }
  //other form processing
  if ($form_id == 'user_profile_form') {

    //add a button to get to the edit tag form
    $form['actions']['manage_tags'] = array(
      //'#prefix' => '<div id="manage-tags-button">',
      //'#suffix' => '</div>',
      //'#weight' => -30,
      '#type' => 'button',
      '#value' => 'Manage Tags',
      '#executes_submit_callback' => true,
      '#submit' => array('squawk_manage_tags_callback'),
    );
    //dsm($form);
    //reorganize render array
    $form['actions']['#weight'] = -30;
    $form['account_info'] = array(
      '#type' => 'fieldset',
      '#title' => 'Account Information',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 0,
      '#printed' => TRUE,
    );
    $form['account_info']['account'] = $form['account'];
    $form['account']['#printed'] = TRUE;

    $form['bio_demo'] = array(
      '#type' => 'fieldset',
      '#title' => 'Biographical Information',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 0,
    );
    $form['bio_demo']['picture'] = $form['picture'];
    $form['picture']['#printed'] = TRUE;
    $form['bio_demo']['field_first_name']= $form['field_first_name'];
    $form['field_first_name']['#printed'] = TRUE;
    $form['bio_demo']['field_last_name']= $form['field_last_name'];
    $form['field_last_name']['#printed'] = TRUE;
    $form['bio_demo']['field_department']= $form['field_department'];
    $form['field_department']['#printed'] = TRUE;
    $form['bio_demo']['field_college']= $form['field_college'];
    $form['field_college']['#printed'] = TRUE;
    $form['bio_demo']['field_division']= $form['field_division'];
    $form['field_division']['#printed'] = TRUE;
    //$form['legend']['#collapsed'] = TRUE;
  }
}
/*
 * Manage tags callback
 */
function squawk_manage_tags_callback($form, &$form_state) {
  $user = $form_state['user'];
  drupal_goto('channels/' . $user->uid . '/profile/tags');
  return;
}
//functions to manage adding a tag on the create new update form
function _show_tag_subform($form, $form_state) {
  //return $form['add_tag_subform'];
  return $form['tagset'];
}
function _cancel_tag_subform($form, $form_state) {
  //return $form['add_tag_subform'];
  return $form['tagset'];
}
function _save_tag_subform(&$form, &$form_state) {
  //dsm($form_state['input']['new_tag']);
  global $user;
  $vocabulary = taxonomy_vocabulary_machine_name_load('squawk_tags');
  $user_tid_array = taxonomy_get_term_by_name($user->name, 'squawk_tags');
  //dsm($user_tid_array);
  if (isset($form_state['input']['new_tag']) && strlen($form_state['input']['new_tag'])>0 ) {
    $keys = array_keys($user_tid_array);
    $term = new stdClass();
    $term->name = check_plain(ucwords($form_state['input']['new_tag']));
    $term->vid = $vocabulary->vid;
    $term->parent = $user_tid_array[$keys[0]]->tid;
    $term->field_active['und'][0]['value'] = TRUE;
    taxonomy_term_save($term);
  }
  //(I probably only need the options refreshed; defining the whole control just in case.
  $form['tagset']['tags'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Tags',
    '#options' => _fetch_active_tag_options($user->uid),
    '#prefix' =>'<div id="active-user-tags">',
    '#suffix' => '</div>',
  );
  $form_state['input']['tags'][$term->tid] = $term->tid;
  //dsm($form);dsm($form_state);
  return form_builder($form['#id'],$form['tagset'],$form_state);
}
/*
 * Implements hook_node_validate
 */
function squawk_node_validate($node, $form, &$form_state) {
  global $user;
  //transform the values of the active tags control back to the field tags for saving
  //the data for the tags that the user has selected are in $form_state['values']['tags'] and they have to be translated to
  //$form_state['values']['field_tags'] one for one.
  foreach ($form_state['values']['tags'] as $key=>$value) {
    if ($value > 0) {
      $form_state['values']['field_tags']['und'][$key]['tid'] = $value;
    }
  }
  //process mentions.
  $mentions = extract_mentions($form_state['values']['body']['und'][0]['value']);
  //dsm($mentions);
  $form_state['values']['field_mentions']['und'] = array_merge($form_state['values']['field_mentions']['und'], $mentions);
  //dsm($form_state);
  switch($form_state['open_mode']) {
    case 'edit':
    $form_state['values']['uid'] = $user->uid;
    break;
    case 'add':
    //dsm($form_state);
    break;
    default:
      drupal_set_message('Something went wrong with saving the node. Please report this.', 'error');
  }
  //dsm('this is a validate function');
  //dsm($form_state);
}

function squawk_format_user($uid) {
  // returns an array with the main key is the uid and has some formatted stuff for
  // list items
  $u=user_load($uid);
  if (!$u->field_first_name || !$u->field_last_name || !$u->field_department) {
    $display_name = $u->name;
    $dept = 'Student Affairs';
    $sort_key = $u->name;
  }
  else {
    $fname=$u->field_first_name['und'][0]['value'];
    $lname=$u->field_last_name['und'][0]['value'];
    $dept=$u->field_department['und'][0]['value'];
    $display_name = $fname . ' ' . $lname;
    $sort_key = $lname;
  }
  $pic = theme('user_picture', array('account' => $u, 'no_link' => TRUE));


  //$pic = theme('image_style', array('path' => $pic_path, 'style_name' => 'thumbnail'));
  $attributes = array(
    'attributes' => array(
      'id' => 'user-' . $u->uid,
      'class'=>array('user-link',),
      )
  );

  //$output['data'] = $pic . l($display_name,'user/' . $u->uid, $attributes)
  //  . "<span class='ui-li-count department' >" . $dept . "</span>";
  //dsm($output);
  $dname = '<span>' . $display_name . '</span>';
  $department = "<span class='ui-li-count department' >" . $dept . "</span>";
  $html_blob = $pic . $dname . $department;
  $the_link = array(
    '#theme' => 'link',
    '#text' => $html_blob,
    '#path' => 'channels/' . $u->uid,
    '#options' => array(
      'attributes' => array(
        'id' => 'user-' . $u->uid,
        'class' => array('user-link',),
      ),
      'html' => TRUE,
    ),
  );
  $output['data'] = drupal_render($the_link);
  $output['sort_key'] = $sort_key;
  return $output;
}
function squawk_relationships_themed($reltype) {
  global $user;
  $u=user_load($user->uid);
  if (!$u->field_first_name) {
    $display_name = $u->name;
  }
  else {
    $display_name = $u->field_first_name['und'][0]['value'];
  }
  $relations = squawk_relationships($user->uid,$reltype);
  //dsm($relations);
  foreach($relations as $key=>$row) {
    $sort_key[$key] = $row['sort_key'];
  }
  array_multisort($sort_key, SORT_ASC, $relations);
  //test for zero and make some messages based on it. I don't know how to do this yet.
  $variables = array(
    'items'=> $relations,
    'type' => 'ul',
    'title' => $display_name . "'s " . $reltype,
    'attributes' =>  array(
      'id' => $reltype . '-' . $u->name,
      'class' => array('ui-listview', $reltype,),
      'data-role' => 'listview',
      ),
  );
  return theme_item_list($variables);
}


function squawk_relationships($uid, $reltype,$style='link') {
  //if no reltype is given pick 'peers'
  $relations = array();
  switch ($reltype) {
    case 'peers':
      // Returns an array of user ids that report to the same uid that
      // $uid reports to. Here, report means that $uid is the requestee_id
      // of an approved 'lead' relationship type. The requester_id of that type is the
      // 'lead', the uid they report to.
      //user relationships api provides some handy functions here.
      //get $uid's lead
      $leads = user_relationships_load(array('requestee_id'=>$uid,'rtid'=>1));
      foreach ($leads as $lead) {
        foreach($lead as $key=>$value) {
          if ($key == 'requester_id') {
            //$peerset = user_relationships_load(array('requester_id' => $value), array('include_user_info'=>TRUE));
            $peerset = user_relationships_load(array('requester_id' => $value));
            //now mess with the peers
            foreach ($peerset as $peer) {
              foreach ($peer as $peerkey => $peervalue) {
                if ($peerkey == 'requestee_id') {
                  // remove the $uid from the peer list
                  if($peervalue != $uid) {
                    if($style == 'human') {
                      $relations[$peervalue] = squawk_human_name($peervalue);
                    }
                    else {
                      $relations[$peervalue] = squawk_format_user($peervalue);
                    }
                  }
                }
              }
            }
          }
        }
      }
      break;
    case 'leads':
      $leads = user_relationships_load(array('requestee_id'=>$uid,'rtid'=>1));
      foreach ($leads as $lead) {
        foreach($lead as $key=>$value) {
          if ($key == 'requester_id') {
//            $relations[$value] = squawk_format_user($value);
            if($style == 'human') {
              $relations[$value] = squawk_human_name($value);
            }
            else {
              $relations[$value] = squawk_format_user($value);
            }
          }
        }
      }
      break;
    case 'reports':
      $reports = user_relationships_load(array('requester_id'=>$uid,'rtid'=>1));
      foreach ($reports as $report) {
        if($style == 'human') {
          $relations[$report->requestee_id] = squawk_human_name($report->requestee_id);
        }
        else {
          $relations[$report->requestee_id] = squawk_format_user($report->requestee_id);
        }
        $relations[$report->requestee_id]['rid'] = $report->rid;
      }
      break;
    case 'self':
      $self = $uid;
//      $relations[$self] = squawk_format_user($self);
      if($style == 'human') {
        $relations[$self] = squawk_human_name($self);
      }
      else {
        $relations[$self] = squawk_format_user($self);
      }
      break;
    //default:
  }
  if($style == 'count') {
    //only return the count of how many users are in the individual relationship type.
    $count = count($relations);
    $relations = array('count'=>$count);
  }
  return $relations;
}
/*
 * implements hook_user_login
 */
function squawk_user_login(&$edit, $account) {
  $vocabularies = taxonomy_vocabulary_get_names();
  //dsm('here');
  //returns an array of objects keyed by name {name,machine_name,vid}
  $mention = taxonomy_get_term_by_name($account->name,'mentions');
  if (empty($mention)) {
    //create the entry in the vocabulary
    $mention = new stdClass();
    $mention->name = $account->name;
    $mention->vid = $vocabularies['mentions']->vid;
    $mention->description = $account->uid;
    taxonomy_term_save($mention);
  }
}
/*
 * implements hook_user_update
 */
function squawk_user_update(&$edit, $account) {
  // $edit is the user account that has just been updated.
  // this fires on login for some reason I don't understand yet. It exits to keep blank usernames from
  // getting a vocabulary entry
  //dsm($edit);
  if (!isset($edit->name)) {
    return;
  }
  $username = $edit['name'];
  $vocabularies = taxonomy_vocabulary_get_names();
  dsm('here');
  //returns an array of objects keyed by name {name,machine_name,vid}
  $mention = taxonomy_get_term_by_name($username,'mentions');
  if (empty($mention)) {
    //create the entry in the vocabulary
    $mention = stdClass();
    $mention->name = $username;
    $mention->description = $account->uid;
    taxonomy_term_save($mention);
  }

  //add a vocabulary with the name user_squawk_tags
  if (module_exists('taxonomy')) {
    // Check to see if the vocabulary already existed (i.e. from a previous installation).
    $already_exists = db_query("SELECT vid, name FROM {taxonomy_vocabulary} WHERE module = 'squawk' AND
      machine_name = 'squawk_tags'")->fetchObject();
    if (empty($already_exists)) {
      //create the vocabulary
      // Create a default vocabulary for use with hashtags.
      $vocabulary = (object) array(
        'name' => t('Squawk Tags'),
        'machine_name' => 'squawk_tags',
        'description' => t('Contains Navigation and filtering tags used in Squawk Statuses.'),
        'hierarchy' => 1,
        'module' => 'squawk',
        'weight' => 0,
      );
    taxonomy_vocabulary_save($vocabulary);
    $vid = isset($vocabulary->vid) ? $vocabulary->vid :
      db_query("SELECT vid FROM {taxonomy_vocabulary} WHERE machine_name = 'squawk_tags' AND module = 'squawk'")->fetchField();
    }
    //now see if the username base term exists
    $already_exists = db_query("SELECT a.vid, a.name as term FROM {taxonomy_term_data} a INNER JOIN {taxonomy_vocabulary} t ON a.vid = t.vid WHERE a.name ='" . $username . "' AND t.machine_name = 'squawk_tags'")->fetchObject();
    if (!empty($already_exists)) {
      //variable_set('statuses_tags_vid', $already_exists->vid);
      drupal_set_message(t('The base term "@term" in Squawk Tags has been already configured for use.',
        array('@term' => $already_exists->term, )));
      return;
    }
    $vid = db_query("SELECT vid FROM {taxonomy_vocabulary} WHERE machine_name = 'squawk_tags' AND module = 'squawk'"
      )->fetchField();
    //seed the vocabulary with some basic terms for the parent term
    $term = new stdClass();
    $term->name = $username;
    $term->vid = $vid;
    $term->parent = 0;
    taxonomy_term_save($term);
    //need the tid for this term b/c it is the parent for the following terms
    $base_tid = $term->tid;
    $default_tags=array('Squawk Bug','Feature Request','New Idea','Data', 'SASG', 'Registration', 'Processing');
    foreach($default_tags as $value) {
      $term = new stdClass();
      $term->name = $value;
      $term->vid = $vid;
      $term->parent = $base_tid;
      taxonomy_term_save($term);
    }
    drupal_set_message(t('The base term for username "' . $username . '" has been created and configured in Squawk Tags.'));
  }
  else {
    drupal_set_message(t('Squawk only allows using tags when the Taxonomy module is installed.'));
  }
}
/*
 * implements hook_user_insert
 */
function squawk_user_insert(&$edit) {
  // $edit is the user account that has just been updated.
  //dsm( ' I am in User Insert Hook ' . $edit);
  $username = $edit['name'];
  //add a vocabulary with the name user_squawk_tags
  if (module_exists('taxonomy')) {
    // Check to see if the vocabulary already existed (i.e. from a previous installation).
    $already_exists = db_query("SELECT vid, name FROM {taxonomy_vocabulary} WHERE module = 'squawk' AND
      machine_name = 'squawk_tags'")->fetchObject();
    if (empty($already_exists)) {
      //create the vocabulary
      // Create a default vocabulary for use with hashtags.
      $vocabulary = (object) array(
        'name' => t('Squawk Tags'),
        'machine_name' => 'squawk_tags',
        'description' => t('Contains Navigation and filtering tags used in Squawk Statuses.'),
        'hierarchy' => 1,
        'module' => 'squawk',
        'weight' => 0,
      );
    taxonomy_vocabulary_save($vocabulary);
    $vid = isset($vocabulary->vid) ? $vocabulary->vid :
      db_query("SELECT vid FROM {taxonomy_vocabulary} WHERE machine_name = 'squawk_tags' AND module = 'squawk'")->fetchField();
    }
    //now see if the username base term exists
    $already_exists = db_query("SELECT a.vid, a.name as term FROM {taxonomy_term_data} a INNER JOIN {taxonomy_vocabulary} t ON a.vid = t.vid WHERE a.name ='" . $username . "' AND t.machine_name = 'squawk_tags'")->fetchObject();
    if (!empty($already_exists)) {
      //variable_set('statuses_tags_vid', $already_exists->vid);
      drupal_set_message(t('The base term "@term" in Squawk Tags has been already configured for use.',
        array('@term' => $already_exists->term, )));
      return;
    }
    $vid = db_query("SELECT vid FROM {taxonomy_vocabulary} WHERE machine_name = 'squawk_tags' AND module = 'squawk'"
      )->fetchField();
    //seed the vocabulary with some basic terms for the parent term
    $term = new stdClass();
    $term->name = $username;
    $term->vid = $vid;
    $term->parent = 0;
    taxonomy_term_save($term);
    //need the tid for this term b/c it is the parent for the following terms
    $base_tid = $term->tid;
    $default_tags=array('Squawk Bug','Feature Request','New Idea','Data', 'SASG', 'Registration', 'Processing');
    foreach($default_tags as $value) {
      $term = new stdClass();
      $term->name = $value;
      $term->vid = $vid;
      $term->parent = $base_tid;
      taxonomy_term_save($term);
    }
    drupal_set_message(t('The base term for username "' . $username . '" has been created and configured in Squawk Tags.'));
  }
  else {
    drupal_set_message(t('Squawk only allows using tags when the Taxonomy module is installed.'));
  }
}
/*
 * implements hook node info
 */
function squawk_node_info() {
  //defining the squawk update node type
  $squawk_update = array(
    'squawk_update' => array(
      'name' => t('Squawk Update'),
      'base' => 'squawk_update',
      'description' => t('Brief updates on what is new in student affairs.'),
      'help' => t('To add an update to a profile, just type it, tag it, and tell it!'),
      'has_title' => FALSE,
      'locked' => FALSE,
    ),
  );
  return $squawk_update;
}


/*
 * squawk_fetch_senders($user)
 */
 function squawk_fetch_senders($user_uid, $view='news') {
  //this is the main driver for getting the right nids
  //$view is not yet implemented. This controls what the list returns. The product populates the sender block.
  //i should add somethign tomake it disappear (the block) if javascript is not enabled.

  $query = new EntityFieldQuery;
  $results = $query -> entityCondition('entity_type', 'node')
    -> entityCondition('bundle', 'update')
    -> fieldCondition('field_recipient', 'value', $user_uid)
    -> propertyOrderBy('uid', 'ASC')
    -> execute();
  $nids = array();
  if (isset($results['node'])) {
    $nids = array_keys($results['node']);
  }
  if(empty($nids)) {
    //no records were returned. send a message.
    $message = 'There were no senders to return for this particular user.';
    return array('0' => array( 'sender' => $message, 'uid' => '0'));
  }
  //load the nids and the relevant users
  $nodes = node_load_multiple($nids);
  //$viewer = user_load($viewer_uid);
  //$recipient = user_load($recipient_uid);
  //show the nids
  $output = array();
  $uid=0;
  $count = 1;
  foreach($nodes as $node) {
    //nodes are ordered by uid, so if there is a change then it is a new author. reset the count and add a new entry
    if ($node->uid != $uid) {
      $sender = user_load($node->uid);
      $output[$node->uid] = array(
        'sender' => format_username($sender),
        'count' => 1,
        'user_name' => $sender->name,
      );
      //settle up the previous uids count
      if($uid != 0) {
        $output[$uid]['count'] = $count;
        //reset the count
        $count = 1;
      }
      $uid = $node->uid;
    }
    else {
      //update the count
      ++$count;
    }
  }
  //update the final count
  $output[$uid]['count']=$count;
  return $output;
}
/*
 *  squawk_fetch_updates($user)
 */
function squawk_fetch_updates($recipient_uid, $type='news') {
  //function returns a render array.
  /*
   * There are two cases. viewer and recipient are the same. load all the messages private and normal.
   * View and recipient are different. Load all normal and only those marked private where author is viewer.
   *
   * Update: could not get the sort to work b/c the queries were in two parts (or query not straightforward with
   * EntityQuery thinger. So I separated to normal and private queries. Now if viewer == recipieent then show all private, otherwise only show private where viewer and author are same. Dont show archive to non recipient viewer.
   */
  global $user;
  $viewer = user_load($user->uid);
  //dsm($viewer);
  $recipient = user_load($recipient_uid);
  //this is the main driver for getting the right nids
  $nids = array();
  $query = new EntityFieldQuery;
  $results = $query -> entityCondition('entity_type', 'node')
    -> entityCondition('bundle', 'update')
    -> fieldCondition('field_recipient', 'value', $recipient_uid);
  if(isset($viewer->field_date_sort['und'][0]['value']) && $viewer->field_date_sort['und'][0]['value'] == 'first') {
    $sort = 'DESC';
  }
  else {
    //last
    $sort = 'ASC';
  }
  if(isset($viewer->field_arrange_by['und'][0]['value']) && $viewer->field_arrange_by['und'][0]['value'] == 'sender') {
    $results = $query -> propertyOrderBy('uid', 'ASC') -> propertyOrderBy('changed', $sort);
  }
  else {
    //date
    $results = $query -> propertyOrderBy('changed', $sort) -> propertyOrderBy('uid', 'ASC');
  }
  switch($type) {
    case 'news':
        $results = $query-> fieldCondition('field_private', 'value', FALSE)
        -> fieldCondition('field_archived', 'value', FALSE)
        -> execute();
      if (isset($results['node'])) {
        $nids = array_keys($results['node']);
      }
    break;
    case 'private':
      if ( $viewer->uid == $recipient_uid ){
        $results = $query -> fieldCondition('field_private', 'value', TRUE)
          -> fieldCondition('field_archived', 'value', FALSE)
          -> execute();
      }
      else {
        //only show results where the author is the viewer.
        $results = $query -> propertyCondition('uid', $viewer->uid, '=')
          -> fieldCondition('field_archived', 'value', FALSE)
          -> fieldCondition('field_private', 'value', TRUE)
          -> execute();
      }
      if (isset($results['node'])) {
        $nids = array_keys($results['node']);
      }
    break;
    case 'archive':
      //only the viewer == recipient gets to see this.
      $results = $query -> fieldCondition('field_archived', 'value', TRUE)
        -> execute();
      if (isset($results['node'])) {
        $nids = array_keys($results['node']);
      }
    break;

    default:
      //404 error ... dunno how to set this yet. for now it will fall through the switch and get caught
      //by the next if statement.
  }
  if(empty($nids)) {
    //no records were returned. send a message.
    $message = 'There were no updates to return for this particular user.';
    drupal_set_message($message, 'status');
    return;
  }
  //load the nids and the relevant users
  $nodes = node_load_multiple($nids);
  //$viewer = user_load($viewer_uid);
  //$recipient = user_load($recipient_uid);
  //show the nids
  //$output = node_view_multiple($nodes, 'squawk_teaser');
    drupal_add_js('sites/all/modules/squawk/scripts/show-node-content.js');
    $output = node_view_multiple($nodes, 'full');
  return $output;
}


function squawk_open_update($context, $action) {
  //dsm($context);
  //$u = user_load($destination_user);
  //return user_view($u);
//  return drupal_get_form('test_update_node_form',$destination_user);
  global $user;
  if($action == 'edit') {
    //in this context the $context is a node, not a user
    $node = node_load($context);
    $form_state['build_info']['args'] = array($node, $action);
    form_load_include($form_state, 'inc', 'node', 'node.pages');
    return drupal_build_form('update_node_form', $form_state);
  }
  if ($action == 'add') {
    $node = (object) array('uid' => $user->uid,
      'name' => (isset($user->name) ? $user->name : ''),
      'type' => 'update',
      'language' => LANGUAGE_NONE,
    );
    $form_state['build_info']['args'] = array($node,$context,$action);
    form_load_include($form_state, 'inc', 'node', 'node.pages');
    return drupal_build_form('update_node_form', $form_state);
  }
}
function squawk_back($node) {
  //I think the menu item issues a node load for the given node. so it should be loaded and ready to use
  $uid = $node->field_recipient[$node->language][0]['value'];
  //drupal_goto('user/' . $uid);
  drupal_goto('channels/' . $uid);
}
/*
 * Implements hook_permission
 */
function squawk_permission() {
  return array(
    'edit own profile' => array(
      'title' => t('Edit own profile'),
      'description' => t('User can change settings and upload a picture'),
    ),
    'access org reporting channels' => array(
      'title' => t('Access Org Reporting Channels'),
      'description' => t('User participates in reporting via their position in the Organization'),
    ),
    'access external channels' => array(
      'title' => t('Access External Channels'),
      'description' => t('User can create, manage, and participate in external channels'),
    ),
  );
}
function viewing_own_channel($target) {
  global $user;
  $access_granted = FALSE;
  if ($user->uid == $target->uid) {
    $access_granted = TRUE;
  }
  return $access_granted;
}
function squawk_access_edit_settings($uid) {
  global $user;
  $access_granted = FALSE;
  if ($user->uid == $uid && user_access('edit own profile')) {
    $access_granted = TRUE;
  }
  return $access_granted;
}

function squawk_human_name($uid) {
  $u = user_load($uid);
  if (!$u->field_first_name || !$u->field_last_name) {
    $display_name = $u->name;
    $sort_key = $u->name;
  }
  else {
    $fname=$u->field_first_name['und'][0]['value'];
    $lname=$u->field_last_name['und'][0]['value'];
    $display_name = $fname . ' ' . $lname;
    $sort_key = $lname;
  }
  return array('human_name'=>$display_name, 'sort_key'=>$sort_key, 'uid'=>$uid);
}
function squawk_fetch_user_tags($uid) {
  $user=user_load($uid);
  //load the user specific tags from squawk_tags
  //dont assume the vid just in case ...
  $vocabulary = taxonomy_vocabulary_machine_name_load('squawk_tags');
  //the current user's tags all have the username as the parent tid.
  $query = new EntityFieldQuery;
  $entities = $query->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('name', $user->name)
    ->propertyCondition('vid', $vocabulary->vid)
    ->execute();
    //make sure it has a value. It should have.
    $terms=array();
    if(isset($entities['taxonomy_term'])) {
      $user_tid = array_keys($entities['taxonomy_term']);
      $terms['vocabulary'] = $vocabulary;
      $terms['parent'] = taxonomy_term_load($user_tid[0]);
      $terms['tag_set'] = taxonomy_get_tree($vocabulary->vid,$user_tid[0],NULL,TRUE); //load the full on entities
    }
    //this is ordered by however it is returned from the database. It should be sorted by active-alpha
  return $terms;
}
function _fetch_active_tag_options($uid) {
  $options = array();
  $terms = squawk_fetch_user_tags($uid);
  //make sure it has a value. It should have.
  if(!empty($terms)) {
    foreach($terms['tag_set'] as $term) {
      if($term->field_active['und'][0]['value'] == TRUE) {
        //build the options array for the checkboxes control
        $options[$term->tid] = $term->name;
      }
    }
  }
  asort($options);
  return $options;
}
function squawk_fetch_tag_list($tag_array) {
  $list = array();
  if (!empty($tag_array)) {
    $result = taxonomy_term_load_multiple($tag_array);
    //dsm($result);
    foreach($result as $term) {
      $list[$term->tid]=$term->name;
    }
  }
  //dsm($list);
  return $list;
}
function squawk_compare_tag_lists($target, $source, $affix = NULL) {

  $result['intersection'] = array();
  $result['residue'] = array();
  if(!$source) {
    return $result;
  }
  foreach($source as $skey=>$svalue) {
    $no_match = TRUE;
    foreach($target as $tkey=>$tvalue) {
      if(strtolower($tvalue) == strtolower($svalue)) {
        //match
        $no_match = FALSE;
        $result['intersection'][$tkey] = $tvalue;
      }
    }
    if($no_match) {
      $result['residue'][$skey] = $svalue;
      if($affix) {
        $result['residue'][$skey] = $svalue . ' (' . $affix . ')';
      }
    }
  }
  return $result;
}
function squawk_compare_user_tags($target_set, $source_set) {
  $result['target_set'] = $target_set;
  $result['source_set'] = $source_set;
  $result['intersection'] = array();
  $result['residue'] = array();
  //for each member of the first tagset, compare the text to the second. if there is a match,
  //add the target member to the array that will become the intersection.
  //if there is no match, add the source term to the array that will become the residue
  foreach ($source_set['tag_set'] as $source_obj) {
    //dsm($target_obj);
    $no_match = TRUE;
    foreach($target_set['tag_set'] as $target_obj) {
      //dsm($source_obj);
      if(strtolower($target_obj->name) == strtolower($source_obj->name) &&
          $target_obj->field_active['und'][0]['value'] == TRUE) {
            //got a match
            //dsm('ding');
            $result['intersection'][$target_obj->tid] = $target_obj->name;
            $no_match = FALSE;
      }
    }

    if ($no_match) {
      $result['residue'][$source_obj->tid]= $source_set['parent']->name . ": " . $source_obj->name;
    }
  }
  //dsm($result);
  return $result;
}
/**
* Implements hook_entity_info_alter().
*/
function squawk_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['squawk_teaser'] = array(
    'label' => t('Squawk Teaser'),
    'custom settings' => TRUE,
  );
  $entity_info['taxonomy_term']['view modes']['attachments'] = array(
    'label' => t('Attachments'),
    'custom settings' => TRUE,
  );
  $entity_info['user']['view modes']['contact_card'] = array(
    'label' => t('Contact Card'),
    'custom settings' => TRUE,
  );
}
/*
 * node edit title callback
 */
function squawk_node_edit_title_callback($title_string) {
  //dsm(arg());
  $args = arg(); //0 is 'node', 1 is nid.
  $node = node_load($args[1]);
  global $user;
  if ($user->uid == $node->uid) {
    $title = 'Edit/Forward';
  }
  else {
    $title = 'Update/Forward';
  }
  return $title;
}
/**
 * Implementation of hook_field_formatter_info().
 */
function squawk_field_formatter_info() {
  return array(
  'wrapped_text_terms' => array(
    'label' => t('Wrapped text terms'),
    'field types' => array('taxonomy_term_reference'),
  ),
  'mentions' => array(
    'label' => t('Mentions'),
    'field types' => array('taxonomy_term_reference'),
  ),
    /*'user_aware_terms' => array(
      'label' => t('User-aware terms'),
      'field types' => array('taxonomy_term_reference'),
    ),*/
  );
}
/**
 * Implements hook_field_formatter_view().
 */
function squawk_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  //dsm($entity_type);  <--this returns 'node'
  //dsm($entity); //<--and this returnst THE NODE !
  //dsm($instance); <--this returns the field info from the node
  //dsm($field);
  $tids = array();
  if (!empty($items)) {
    foreach($items as $tidarray) {
      $tids[]=$tidarray['tid'];
    }
  }
  switch ($display['type']) {
    //I have to load the terms myself. $items is an array of arrays (('tid'=>###), etc.)...
    case 'wrapped_text_terms':
      $tags = squawk_fetch_tag_list($tids);
      //$tags is of the form $tag[tid]=>name
      if(!empty($tags)) {
        foreach ($tags as $tid=>$term) {
          $options[$tid]['data']=$term;
          $options[$tid]['class']=array('tid-' . $tid, 'content-tags');
        }
        $element = array(
          '#prefix' => '<div class="update-tags">',
          '#suffix' => '</div>',
          '#theme' => 'item_list',
          '#type' => 'ul',
          '#items' => $options,
          '#title' => '',
          '#attributes' => array(
            'class' => array('update-tags'),
          ),
        );
      }
    break;
    case 'mentions':
      if(!empty($tids)) {

        $terms = taxonomy_term_load_multiple($tids);
        foreach ($terms as $tid=>$term) {
          //have to put the link in the context of the permissions. If org relationship then news,
          $account = user_load($term->description);
          //otherwise private.
          if (squawk_relationship_exists($account)) {
            $options[$tid]['data'] = l(format_username($account),'channels/' . $term->description);
          }
          else {
            $options[$tid]['data'] = l(format_username($account),'channels/' . $term->description . '/private');
          }
          //$options[$tid]['data']=l(format_username(user_load($term->description)),'channels/' . $term->description);
          $options[$tid]['class']=array($term->name, 'mentions');
        }
        $element = array(
          '#prefix' => '<div class="mentions">',
          '#suffix' => '</div>',
          '#theme' => 'item_list',
          '#title' => t('Mentions'),
          '#type' => 'ul',
          '#items' => $options,
          '#title' => '',
          '#attributes' => array(
            'class' => array('mentions'),
          ),
        );
      }
      //dsm($terms);
    break;
    /*case 'user_aware_terms':
      $node_tags = squawk_fetch_tag_list($tids);
      //get the node recipient from the node in question
      $context = $entity->field_recipient['und'][0]['value'];
      global $user;
      if ($context == $user->uid) {
        $context_tag_title = 'Your Tags';
      }
      else {
        $recipient = squawk_human_name($context);
        $context_tag_title = $recipient['human_name'] . '\'s Tags';
      }
      $recipient = squawk_human_name($context);
      $terms = squawk_fetch_user_tags($context);
      $user_tags = array();
      //make sure it has a value. It should have.
      if(!empty($terms)) {
        foreach($terms['tag_set'] as $term) {
          //build the options array for the checkboxes control
          $user_tags[$term->tid] = $term->name;
        }
      }
      //dsm($user_tags);
      //dsm($node_tags);
      $result = squawk_compare_tag_lists($user_tags, $node_tags);
      //first display the tags that are in the recipient's tags $result['intersection']
      //then display the tags that are not in the recipient's tagset $result['residue']
      $test = array(
        '#theme' => 'item_list',
        '#items' => array(
          array( $context_tag_title,
            'children' => $result['intersection'],
            'class' => array('recipient-tags', 'tags', 'squawk-tags'),
          ),
          array( 'Other Tags',
            'children' => $result['residue'],
            'class' => array('other-tags', 'tags', 'squawk-tags'),
          ),
        ),
        '#type' => 'ul',
        '#title' => 'Organizing/Content Tags',
        '#attributes' => array(
          'class' => array('ui-listview', 'recipient'),
          'data-role' => 'listview',
        ),
      );
      $element = $test;
      break;
      */
  }
  return $element;
}

/*
 * implements hook_preprocess_node
 */
function squawk_preprocess_node(&$variables) {
  //$variables['classes_array'][] = 'hi-sparky';
//  $variables['title_prefix']['#prefix']= '<div class="ajax-links">';
//  $variables['title_prefix']['#suffix']= '</div>';
  $variables['title_prefix'] = array(
    $variables['content']['ajax_links'],
    //$variables['content']['archive_action'],
    //$variables['content']['edit_link'],
    //$variables['content']['date'],
  );
  //$variables['content']['date']['#printed'] = TRUE;
  //$variables['content']['edit_link']['#printed'] = TRUE;
  //$variables['content']['unread_action']['#printed'] = TRUE;
  $variables['content']['ajax_links']['#printed'] = TRUE;
  $variables['node_url']='/channels' . $variables['node_url'];
  //dsm($variables);
}
/*
 * implements hook_field_extra_fields
 */
function squawk_field_extra_fields() {
  //this adds the field placeholders. They need to have their output created.
  $extra['node']['update']['display'] = array(
    'title' => array(
      'label' => t('Node Title'),
      'weight' => -4,
      'visible' => FALSE,
    ),
        'created' => array(
      'label' => t('Post Date'),
      'weight' => -3,
      'visible' => FALSE,
        ),
        'author' => array(
      'label' => t('Author'),
      'weight' => -2,
      'visible' => FALSE,
        ),
    'new_mark' => array(
      'label' => 'New/Updated node mark',
      'description' => t('The little colored "new" or "updated" word that tells a user there is new content.'),
      'weight' => 0,
      'visible' => FALSE,
    ),
    'node_readmore' => array(
      'label' => 'Read more link',
      'description' => t('Appears in teaser mode.'),
      'weight' => 0,
      'visible' => FALSE,
    ),
    'author_picture' => array(
      'label' => 'Author\'s picture from profile.',
      'description' => t('The picture the user uploaded or the default pic.'),
      'weight' => 0,
      'visible' => FALSE,
    ),
  );
  return $extra;
}
function squawk_preprocess_user_picture(&$variables) {
  $variables['user_picture'] = '';
    $account = $variables['account'];
    if (!empty($account->picture)) {
      // @TODO: Ideally this function would only be passed file objects, but
      // since there's a lot of legacy code that JOINs the {users} table to
      // {node} or {comments} and passes the results into this function if we
      // a numeric value in the picture field we'll assume it's a file id
      // and load it for them. Once we've got user_load_multiple() and
      // comment_load_multiple() functions the user module will be able to load
      // the picture files in mass during the object's load process.
      if (is_numeric($account->picture)) {
        $account->picture = file_load($account->picture);
      }
      if (!empty($account->picture->uri)) {
        $filepath = $account->picture->uri;
      }
    }
    elseif (variable_get('user_picture_default', '')) {
      $filepath = variable_get('user_picture_default', '');
    }
    if (isset($filepath)) {
      $alt = t("@user's picture", array('@user' => format_username($account)));
      // If the image does not have a valid Drupal scheme (for eg. HTTP),
      // don't load image styles.
      if (module_exists('image') && file_valid_uri($filepath) && $style = variable_get('user_picture_style', '')) {
        $variables['user_picture'] = theme('image_style', array('style_name' => $style, 'path' => $filepath, 'alt' => $alt, 'title' => $alt));
      }
      else {
        $variables['user_picture'] = theme('image', array('path' => $filepath, 'alt' => $alt, 'title' => $alt));
      }
  }   //up to this point the code generates a picture. Now add the link or don't.
  if (isset($variables['no_link']) && $variables['no_link'] == TRUE) {
    return;
  }
  else {
    if (!empty($account->uid) && user_access('access user profiles')) {
      $attributes = array(
        'attributes' => array('title' => t('wombat')),
        'html' => TRUE,
      );
      /*
       * Depending on the user permissions, the picture will route the person to the 'news' tab or to the 'private'
       * tab of the destination account. If the person has a reporting relationship that includes the target, then send
       * them to the news tab. Otherwise, send them to the private tab.
      */
      if (squawk_relationship_exists($account)) {
        $variables['user_picture'] = l($variables['user_picture'], "channels/" . $account->uid . "/news", $attributes);
      }
      else {
        $variables['user_picture'] = l($variables['user_picture'], "channels/" . $account->uid . "/private", $attributes);
      }
    }

  }
}
/**
 * Menu item title callback - use the user name.
 */
function squawk_channels_page_title($account) {
  return is_object($account) ? format_username($account) . '\'s Update Channel' : '';
}
function squawk_username_alter(&$name, $account) {
/* load the full user object, since $account not always provide all informations */
  $user = user_load($account->uid);
  if (!empty($user->field_first_name) && !empty($user->field_last_name)) {
    $name = $user->field_first_name['und'][0]['value'] . ' ' . $user->field_last_name['und'][0]['value'];
  }
}
function squawk_preprocess_username(&$variables) {
  //dsm($variables);
  $variables['link_path'] = 'channels/' . $variables['uid'];
}
function squawk_frontpage() {
  global $user;
  if($user->uid > 0) {
    drupal_goto('channels/' . $user->uid);
  }
  else {
    drupal_goto('user/login');
  }
}
function manage_tags_form($form, &$form_state, $user) {
  //load the users tag set...open the form for editing...
  $form['#prefix'] = '<div id="manage-tags-form-wrapper">';
  $form['#suffix'] = '</div>';
  $terms = squawk_fetch_user_tags($user->uid);
  //dsm($terms);
  $form = array();
  $form['actions'] = array('#type' => 'actions', '#weight' => -20,);
  $form['actions']['add_tag'] = array(
    //'#prefix' => '<div id="manage-tags-button">',
    //'#suffix' => '</div>',
    //'#weight' => -30,
    '#type' => 'button',
    '#value' => 'New Tag',
    '#executes_submit_callback' => true,
    '#submit' => array('squawk_new_tag_callback'),
  );
  $form['actions']['back'] = array(
    //'#prefix' => '<div id="manage-tags-button">',
    //'#suffix' => '</div>',
    //'#weight' => -30,
    '#type' => 'button',
    '#value' => 'Back',
    '#executes_submit_callback' => true,
    '#submit' => array('squawk_user_profile_callback'),
  );
  $form['all_active'] = array(
    '#type' => 'checkbox',
    '#title' => 'Show Inactive',
    '#weight' => -19,
  );

  $options = array();
  //make sure it has a value. It should have.
/*
  if(!empty($terms)) {
    foreach($terms['tag_set'] as $term) {
      //build the options array for the checkboxes control
      $options[$term->tid] = $term->name;
    }
  }
  if ($options) {
      $form['field_tags'] = $options;
  }
*/
  if(empty($form_state['vocabulary'])) {
    $form_state['vocabulary'] = $terms['vocabulary'];
  }
  if(empty($form_state['parent'])) {
    $form_state['parent'] = $terms['parent'];
  }
  $form_state['user'] = $user;
  $form['tag_set']['#tree'] = TRUE;
  $form['tag_set']['#prefix'] = '<div id="tag-set">';
  $form['tag_set']['#suffix'] = '</div>';
  foreach ($terms['tag_set'] as $term) {
//    $form['tag_set'][$term->tid] = array(
//      '#type' => 'container',
//      '#attributes' => array(
//        'id' => 'tag-' . $term->tid . '-container',
//      ),
//    );
    $form['tag_set'][$term->tid] = array(
      '#prefix' => '<div class="container">',
      '#suffix' => '</div>',
      'name' => array(
        '#type' => 'textfield',
        '#disabled' => ($term->field_active['und'][0]['value'] == TRUE) ? FALSE : TRUE,
        '#default_value' => check_plain($term->name),
        '#size' => 20,
        '#states' => array(
          //only enable this when the active check box is checked
          'disabled' => array(
            ':input[id="edit-tag-set-' . $term->tid . '-active"]' => array('checked' => FALSE),
          ),
          'invisible' => array(
            ':input[name="all_active"]' => array('checked' => FALSE),
            ':input[id="edit-tag-set-' . $term->tid . '-active"]' => array('checked' => FALSE),
          ),
        ),
        '#title' => 'Filter/Tag',
        '#title_display' => 'invisible',
        '#attributes' => array(
          'class' => array(
            'edit-area',
            drupal_html_class($term->name),
            ($term->field_active['und'][0]['value'] == TRUE) ? 'active-yes' : 'active-no',
          ),
        ),
      ),
      'active' => array(
        '#type' => 'checkbox',
        '#default_value' => $term->field_active['und'][0]['value'],
        '#title' => 'Active',
        '#states' => array(
          'invisible' => array(
            ':input[name="all_active"]' => array('checked' => FALSE),
            ':input[id="edit-tag-set-' . $term->tid . '-active"]' => array('checked' => FALSE),
          ),
        ),
      ),
      'tag_name' => array(
        '#type' => 'value',
        '#value' => $term->name,
      ),
    );
  }
  // Only make this form include a submit button and weight if more than one
  // tag exists.
  if (count($terms['tag_set']) > 1) {
    //$form['actions'] = array('#type' => 'actions');
    $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Save Changes'));
  }
  return $form;
}
/*
 * squawk_user_back callback
 */
function squawk_user_profile_callback($form, &$form_state) {
  $user = $form_state['user'];
  drupal_goto('channels/' . $user->uid . '/profile');
  return;
}
/*
 * add  new tag callback
 */
function squawk_new_tag_callback($form, &$form_state) {
  $user = $form_state['user'];
  drupal_goto('channels/' . $user->uid . '/profile/tags/add');
  return;
}
/*
 * manage_tags_form_submit
 */
function manage_tags_form_submit($form, &$form_state) {
  //save all the changes that were made. Since this is just an edit form,
  //just clack through all the terms and update as necessary.
  //dsm($form_state);
  foreach ($form_state['values']['tag_set'] as $key=>$item) {
    $term = new StdClass();
    $term->tid = $key;
    $term->vid = $form_state['vocabulary']->vid;
    $term->name = check_plain($item['name']);
    $term->field_active['und'][0]['value'] = $item['active'];
    taxonomy_term_save($term);
  }
  return;
}


function theme_manage_tags_form($variables) {
  $form = $variables['form'];

  // Initialize the variable which will store our table rows
  $rows = array();
  // Iterate over each element in our $form['tag_set'] array
  foreach (element_children($form['tag_set']) as $id) {

    // Before we add our 'weight' column to the row, we need to give the
    // element a custom class so that it can be identified in the
    // drupal_add_tabledrag call.
    //
    // This could also have been done during the form declaration by adding
    //     '#attributes' => array('class' => 'example-item-weight'),
    // directy to the 'weight' element in the form.
    //$form['example_items'][$id]['weight']['#attributes']['class'] = array('example-item-weight');

    // We are now ready to add each element of our $form data to the $rows
    // array, so that they end up as individual table cells when rendered
    // in the final table.  We run each element through the drupal_render()
    // function to generate the final html markup for that element.
    $rows[] = array(
      'data' => array(
        // Add our 'name' column
        drupal_render($form['tag_set'][$id]['name']),
        // Add our 'edit' column
        drupal_render($form['tag_set'][$id]['active']),
        // Add our 'weight' column
        //drupal_render($form['tag_set'][$id]['weight']),
      ),
      // To support the tabledrag behaviour, we need to assign each row of the
      // table a class attribute of 'draggable'. This will add the 'draggable'
      // class to the <tr> element for that row when the final table is
      // rendered.
      'class' => array('draggable', 'tag-is-active'),
    );
  }
  // We now define the table header values.  Ensure that the 'header' count
  // matches the final column count for your table.
  //$header = array(t('Name'), t('Description'), t('Weight'));
  $header = array(t('Filter/Tag'), t('Active'));

  // We also need to pass the drupal_add_tabledrag() function an id which will
  // be used to identify the <table> element containing our tabledrag form.
  // Because an element's 'id' should be unique on a page, make sure the value
  // you select is NOT the same as the form ID used in your form declaration.
  $table_id = 'manage-tag-table';

  // We can render our tabledrag table for output.
  $output = '<div id="manage-tags-form-content">';
   // And then render any remaining form elements (such as our submit button)
  $output .= drupal_render_children($form);
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => $table_id)));

  $output .='</div>';
  // We now call the drupal_add_tabledrag() function in order to add the
  // tabledrag.js goodness onto our page.
  //
  // For a basic sortable table, we need to pass it:
  //   - the $table_id of our <table> element,
  //   - the $action to be performed on our form items ('order'),
  //   - a string describing where $action should be applied ('siblings'),
  //   - and the class of the element containing our 'weight' element.
  //drupal_add_tabledrag($table_id, 'order', 'sibling', 'order-weight');

  return $output;
}
function archive_update($node, $type='ajax') {
  //if the archived field of the node is true, set it to false.
  //if the archive field is set to false, set it to true.
  //$node->field_archived['und'][0]['value']=TRUE;

  if($node->field_archived[LANGUAGE_NONE][0]['value'] == TRUE) {
    $node->field_archived[LANGUAGE_NONE][0]['value'] = 0;
    drupal_set_title('Retrieved ' . $node->title . ' from Archive.');
    $action = 'Current';
    $class_add = 'archived-no';
    $class_remove = 'archived-yes';
  }
  else {
    $node->field_archived[LANGUAGE_NONE][0]['value'] = TRUE;
    drupal_set_title('Sent ' . $node->title . ' to Archive.');
    $action = 'Archived';
    $class_add = 'archived-yes';
    $class_remove = 'archived-no';
  }
  field_attach_update('node',$node);
  if($type == 'ajax') {
    $link = l(t($action), 'channels/archive/' . $node->nid . '/nojs/', array('attributes' => array('class' => array('use-ajax'))));
    $html = '<div id="node-' . $node->nid . '-archive-action" class="archive-action">' . $link . '</div>';
    $commands = array();
    $commands[] = ajax_command_replace('#node-' . $node->nid . '-archive-action', $html);
    $commands[] = ajax_command_invoke('article#node-update-' . $node->nid, 'addClass', array($class_add));
    $commands[] = ajax_command_invoke('article#node-update-' . $node->nid, 'removeClass', array($class_remove));
    $page = array('#type' => 'ajax', '#commands' => $commands);
    ajax_deliver( $page);
  }
  else {
    $markup = '<p>' . $node->field_archived[LANGUAGE_NONE][0]['value'] . '</p>';
    return array(
      '#prefix' => '<div class="node">',
      '#suffix' => '</div>',
      '#markup' => $markup . drupal_render(node_view($node)),
    );
  }
  //return;
}
function tag_as_new($node, $type='ajax') {
  //toggle the last-viewed timestamp for this node and the current user.
  global $user;
  if(node_last_viewed($node->nid) > 0) {
    //this returns the timestamp when the node was last viewed. Since this is a toggle,
    //delete the row in this case. If the function returns zero, then the node has not been viewed, so
    //in that case mark it as read.
    $num_deleted = db_delete('history')
      ->condition('nid', $node->nid)
      ->condition('uid', $user->uid)
      ->execute();
    $action = 'New';
  }
  else {
    //update the time stamp to now.
    node_tag_new($node);
    $action = 'Viewed';
  }
  if($type == 'ajax') {
    $link = l(t($action), 'channels/unread/' . $node->nid . '/nojs/', array('attributes' => array('class' => array('use-ajax'))));
    $html = '<div id="node-' . $node->nid . '-unread-action" class="unread-action">' . $link . '</div>';
    $commands = array();
    $commands[]=ajax_command_replace('#node-' . $node->nid . '-unread-action', $html);
    $page = array('#type' => 'ajax', '#commands' => $commands);
    ajax_deliver( $page);
  }
  else {
    $markup = '<p>' . $node->field_archived[LANGUAGE_NONE][0]['value'] . '</p>';
    return array(
      '#prefix' => '<div class="node">',
      '#suffix' => '</div>',
      '#markup' => $markup . drupal_render(node_view($node)),
    );
  }
}
function squawk_rel_menu_access($reltype, $uid = NULL) {
  //returns true if there are relationships between the current user
  //and others for the given $reltype
    $allow = FALSE;
    global $user;
  if (user_access('access org reporting channels')) {
    $result = squawk_relationships($user->uid, $reltype, 'count');
    if ($result['count'] > 0) {
      $allow = TRUE;
    }
  }
  return $allow;
}
function squawk_update_update($form, &$form_state) {
  //dsm($form_state);
  //dsm($form);
  //glean stuff
  $receiver_1 = $form_state['values']['field_recipient'][LANGUAGE_NONE][0]['value'];
  //process everything.
  //$new_nid = squawk_node_clone($form_state['nid']);
  //dsm(node_load($new_nid));
  /*$node->type = 'update';
  $node->is_new = TRUE;
  //node_object_prepare($node);
  $node->language = LANGUAGE_NONE;
  $node->comment = 0;
  $node->format = 2;

  $node->uid = $user->uid;
  //update the creation date/time
  $node->published = TRUE;
  $node->created = REQUEST_TIME;
  node_save($node);
  */

  //explicitly set the author to the current user
  global $user;
  $node->uid = $user->uid;
  $node->name = $user->name;
  //set the values of the mentions field

  $node = $form_state['node'];
  node_save($node);
  if (isset($node->nid) ) {
  dsm($node);
    //hello to the folks at home
    //send mail to the recipient if they have not turned off notifications.
    $receiver_acct = user_load($receiver_1);
    if(isset($receiver_acct->field_notifications) && $receiver_acct->field_notifications['und'][0]['value'] == 'on') {
      $params['account'] = $receiver_acct;
      //drupal_mail($module, $key, $to, $language, $params = array(), $from = NULL, $send = TRUE)
      drupal_mail('squawk', 'update', $receiver_acct->mail, user_preferred_language($receiver_acct), $params);
    }
    //dsm('bark');
    $bonus_receivers = array();
    //dsm($node->nid . ' and ...process the receivers');
    //dsm($form_state);
    if(!empty($form_state['values']['peer_set'])) {
      foreach($form_state['values']['peer_set'] as $key=>$value) {
        if ($value != 0) {
          $bonus_receivers[] = $value;
        }
      }
    }
    if(!empty($form_state['values']['report_set'])) {
      foreach($form_state['values']['report_set'] as $key=>$value) {
        if ($value != 0) {
          $bonus_receivers[] = $value;
        }
      }
    }
    if(!empty($form_state['values']['lead_set'])) {
      foreach($form_state['values']['lead_set'] as $key=>$value) {
        if ($value != 0) {
          $bonus_receivers[] = $value;
        }
      }
    }
    if($form_state['values']['self'] > 0 ) {
      $bonus_receivers[] = $node->uid;
    }
    //dsm($bonus_receivers);
    $recnum=0;
    //$receiver_1 = $form_state['values']['field_recipient']['und'][0]['value'];
      if (!empty($bonus_receivers)) {
      //dsm($bonus_receivers);
      foreach ($bonus_receivers as $counter=>$recipient) {
        dsm('attempting to post to ' . $recipient . ' with ' . $node->nid);
        //trying some stuff here.
        $node_copy = new stdClass();
        $node_copy = clone $node;
        $node_copy->nid = NULL;
        $node_copy->vid = NULL;
        $node_copy->tnid = NULL;
        $node_copy->created = NULL;
        $node_copy->path = NULL;
        $node_copy->field_recipient[LANGUAGE_NONE][0]['value'] = $recipient;
        node_save($node_copy);
        $success = $node_copy->nid;
        if ($success > 0) {
          drupal_set_message($node->nid, 'status');
          ++$recnum;
        }
      }
    }
  }
  drupal_set_message('Saved.', 'status');
  //dsm($form_state);
  if ($recnum > 0 ) {
    drupal_set_message('...and copied to ' . $recnum . ' others.','status');
  }
  //return to the main update page the user was on. that should provide feedback that the save was successful.
  if($form_state['values']['field_private']['und'][0]['value'] == 1) {
    $form_state['redirect'] = 'channels/' . $receiver_1 . '/private';
  }
  else {
    $form_state['redirect'] = 'channels/' . $receiver_1;
  }
  return;
}

function squawk_simplebutton($form, &$form_state, $nid) {
  $form = array();
  $form['changethis'] = array(
    '#title' => t("Choose something and explain why"),
    '#type' => 'select',
    '#options' => array(
      'one' => 'one',
      'two' => 'two',
      'three' => 'three',
    ),
    '#ajax' => array(

      // #ajax has two required keys: callback and wrapper.
      // 'callback' is a function that will be called when this element changes.
      'callback' => 'squawk_simplebutton_callback',

      // 'wrapper' is the HTML id of the page element that will be replaced.
      'wrapper' => 'replace_textfield_div',
      // There are also several optional keys - see ajax_example_autocheckboxes // below for details on 'method', 'effect' and 'speed' and // ajax_example_dependent_dropdown for 'event'.
    ),
  );

  // This entire form element will be replaced whenever 'changethis' is updated.
  $form['replace_textfield'] = array(
    '#type' => 'textfield',
    '#title' => t("Why"),

    // The prefix/suffix provide the div that we're replacing, named by
    // #ajax['wrapper'] above.
    '#prefix' => '<div id="replace_textfield_div">',
    '#suffix' => '</div>',
  );

  // An AJAX request calls the form builder function for every change.
  // We can change how we build the form based on $form_state.
  if (!empty($form_state['values']['changethis'])) {
    $form['replace_textfield']['#description'] = t("Say why you chose '@value'", array('@value' => $form_state['values']['changethis']));
  }
  return $form;
}
function squawk_simplebutton_callback($form, $form_state) {
  // The form has already been submitted and updated. We can return the replaced
  // item as it is.
  return $form['replace_textfield'];
}
function channel_members($term, $uid = NULL) {
  //allow admins to bypass the permissions
  if($term->vocabulary_machine_name != 'channels') {
    if (!user_access('administer users')) {
      return FALSE;
    }
    else {
      return TRUE;
    }
  }
  $result = FALSE;
  if (is_null($uid)) {
    //use the currently logged in user
    //dsm('ding');
    global $user;
    $uid = $user->uid;
  }
  if($term->field_created_by['und'][0]['value'] == $uid || $term->field_type != 'closed') {
    //current user is the creator of the channel or the channel type is either
    //open or broadcast.
    return TRUE;
  }
  $account = user_load($uid);
  if (user_access('administer users', $account)) {
    $result = TRUE;
  }

  //$term = taxonomy_term_load($tid);
  //channel members use the net id, which is the user name
  //$channels = field_get_items('user', $account, 'field_channels'); //returns false or array
  $members = field_get_items('taxonomy_term',$term, 'field_members');
  //dsm($members);
  if ( !empty($members) ) {
    foreach($members as $member) {
      foreach($member as $key=>$value) {
        if($value == $account->name) {
          $result = TRUE;
        }
      }
    }
  }
  return $result;
}

function member_channels($uid = NULL, $exclude = array()) {
  $channels = array();
  $terms = array();
  if (is_null($uid)) {
    global $user;
    $account = user_load($user->uid);
  }
  else {
    $account = user_load($uid);
  }
  //first look for all the terms where the user is on the members list
  $q="SELECT entity_id, field_members_value FROM {field_data_field_members} WHERE bundle = 'channels'" .
    "AND entity_type = 'taxonomy_term' AND field_members_value = '" . $account->name . "'";
  $rows = db_query($q)->fetchAll();
  if(!empty($rows)) {
    foreach($rows as $row) {
      $terms[] = $row->entity_id;
    }
  }
  //then look for all the terms where the user is the creator
  $q="SELECT entity_id, field_created_by_value FROM {field_data_field_created_by} WHERE bundle = 'channels'" .
    "AND entity_type = 'taxonomy_term' AND field_created_by_value = " . $account->uid;
  $rows = db_query($q)->fetchAll();
  if(!empty($rows)) {
    foreach($rows as $row) {
      $terms[] = $row->entity_id;
    }
  }
  //then look for all the terms where the type is 'open' or 'broadcast' b/c they are
  //viewable by everyone.
  $q="SELECT entity_id, field_type_value FROM {field_data_field_type} WHERE bundle = 'channels'" .
    "AND entity_type = 'taxonomy_term' AND (field_type_value = 'open' OR field_type_value = 'broadcast')";
  $rows = db_query($q)->fetchAll();
  if(!empty($rows)) {
    foreach($rows as $row) {
      $terms[] = $row->entity_id;
    }
  }
  $term_objects = taxonomy_term_load_multiple($terms);
  if (!empty($term_objects)) {
    foreach($term_objects as $tobj) {
      //search for it on the exclude list first.
      $skip = FALSE;
      foreach($exclude as $ex_term_obj) {
        //dsm($ex_term_obj);
        //dsm($tobj);
        if ($tobj->tid == $ex_term_obj->tid) {
          //dsm('ding');
          $skip = TRUE;
        }
      }
      if(!$skip) {
        //the key is the term text for sorting purposes.
        if ($tobj->field_created_by['und'][0]['value'] == $account->uid) {
          $creator = 'user-is-creator';
        }
        else {
          $creator = 'user-not-creator';
        }
        $new_content = fetch_new_channel_content($tobj->tid, fetch_channel_history($tobj->tid));
        $picture = array(
          '#theme' => 'image_style',
          '#style_name' => 'thumbnail',
          '#path' => 'public://no_photo.png',
          '#prefix' => '<div class="channel-list-item-picture user-picture">',
          '#suffix' => '</div>',
          '#alt' => $tobj->description,
          '#title' => $tobj->name,
        );
        if (!empty($tobj->field_graphic)) {
          $picture['#path'] = $tobj->field_graphic['und'][0]['uri'];
        }
        $items[strtoupper($tobj->name)] = array(
          '#theme' =>'channel_list_item',
          '#picture' => $picture,
          '#name' => $tobj->name,
          //'#path' => 'ext/channels/' . $tobj->tid,
          '#path' => 'taxonomy/term/' . $tobj->tid,
          '#description' => $tobj->description,
          '#new_content' => $new_content,
          '#creator' => user_load($tobj->field_created_by['und'][0]['value']),
          '#attributes' => array(
            'id' => 'channel-' . $tobj->tid,
            'class' => array( $creator,
              'type-' . $tobj->field_type['und'][0]['value'],
              'status-' . $tobj->field_status['und'][0]['value'],
            ),
          ),
          '#tid' => $tobj->tid,
        );
      }
    }
    //dsm($items);
    ksort($items);
    //dsm($items);
    $channels = array(
      '#theme' => 'channel_list',
      //'#title' => format_username($account) . '\'s Channels',
      '#items' => $items,
      '#attributes' => array(
        'id' => $account->name . '-channels',
        'class' => array('channel-list', 'ui-listview'),
      ),
    );
  }
  //dsm($term_objects);
  return $channels;
}
/*
 * Implements hook_theme
 */
function squawk_theme() {
  return array(
    'channel_list' => array(
      'variables' => array(
        'title' => NULL,
        'attributes' => array(),
        'items' => array(), //a list of channel items.
      ),
    ),
    'channel_list_item' => array(
      'variables' => array(
        'picture' => NULL,
        'name' => NULL,  //line 1
        'description' => NULL,  //line 2 etc
        'creator' => NULL,
        'new_content' => array(),
        'path' => NULL,
        'tid' => 0,
        'attributes' => array(),
      ),
    ),
  );
}
function theme_channel_list_item($variables) {
  //themes an item for a list of channels as li element
  //if there is a picture give it some space on the left
  //it is an image with a style of small_thumbnail I think.
  /*
  <li sort_key="Acree"><a class="user-link" id="user-140" href="/channels/140">  <div class="user-picture">
    <img title="Elizabeth A Acree's picture" alt="Elizabeth A Acree's picture" src="/sites/all/themes/lambda/images/ui/no_photo00.png" typeof="foaf:Image">  </div>
<span>Elizabeth A Acree</span><span class="ui-li-count department">Office of the Registrar</span></a></li>
  */
  //dsm($variables);
  $picture = $variables['picture'];
  $name = $variables['name'];
  $description = $variables['description'];
  $attributes = $variables['attributes'];
  $path = $variables['path'];
  $tid = $variables['tid'];
  $creator = $variables['creator'];
  $new_content = $variables['new_content'];

  if (empty($picture)) {
    //$descriptor = '<div class="channel-list-item-picture user-picture"><img title="Channel ' . $name .
    //'\'s Picture" src="/sites/all/themes/lambda/images/ui/no_photo.png" typeof="foaf:Image"></div>';
    $descriptor = drupal_render($picture);
  }
  else {
    $descriptor = drupal_render($picture);
    //$descriptor = '<div class="channel-list-item-picture user-picture"><img title="Channel ' . $name .
    //'\'s Picture" src="/sites/all/themes/lambda/images/ui/no_photo.png" typeof="foaf:Image"></div>';
  }
  $descriptor .= '<div class="channel-list-item-descriptor"><span>' . $name . '</span>';
  if (count($new_content) > 0) {
    $descriptor .= '<span class="new-content-counter cartouche">' . count($new_content) . '</span>';
  }
  $descriptor .= '<span class="created-by">' . format_username($creator) . '</span>';
  if ($description) {
    $descriptor .= '<span>' . $description . '</span></div>';
  }
  else {
    $descriptor .= '</div>';
  }
  $options = array(
    'attributes' => array(
      'id' => 'channel-' . $tid,
      'class' => array('channel-link'),
    ),
    'html' => TRUE,
  );
  $link = l($descriptor, $path, $options);
  $output = '<li' . drupal_attributes($attributes) . '>' . $link . '</li>';
  return $output;
}


function theme_channel_list($variables) {
  $title = $variables['title'];
  $attributes = $variables['attributes'];
  $items = $variables['items'];
  $output = '<div class="channel-list">';
  if (isset($title) && $title !== '') {
    $output .= '<h3>' . $title . '</h3>';
  }
  if (!empty($items)) {
    $output .= "<ul" . drupal_attributes($attributes) . '>';
    $num_items = count($items);
    foreach($items as $key=>$value) {
      $output .= drupal_render($value);
    }
  }
  $output .= '</ul></div>';
  //dsm($output);
  return $output;
}
//************************************************
//*
//* View mode hooks for nodes and terms
//*
//************************************************

//************************************************
//*
//* Implements hook_taxonomy_term_view
//*
//************************************************
function squawk_taxonomy_term_view($term, $view_mode) {
  //make sure we are looking at channels/full view to make our adjustments
  if($term->vocabulary_machine_name == 'channels' && $view_mode == 'full') {
    drupal_add_js('misc/ajax.js');
    drupal_add_js('sites/all/modules/squawk/scripts/show-node-content.js');
    global $user;
    $user_is_creator = FALSE;
    $account = user_load($term->field_created_by['und'][0]['value']);
    if($user->uid == $account->uid) {
      $user_is_creator = TRUE;
    }
    $term->content['ajax_links'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('ajax-links'),
      ),
      '#weight' => 1,
    );
    if($term->field_type['und'][0]['value'] != 'broadcast') {
      $items=array(array('data'=> 'None'));
      if (isset($term->field_members['und'])) {
        for($i=0;$i<count($term->field_members['und']); $i++) {
          $items[$i]['data']=$term->field_members['und'][$i]['value'];
        }
      }
      $term->content['members_dialog'] = array(
        '#prefix' => '<div id="members-dialog" title="' . $term->name . ' Channel Members">',
        '#theme' =>'item_list',
        '#type' => 'ul',
        '#items' => $items,
        '#suffix' => '</div>',
      );
      /*$term->content['ajax_links']['members_button'] = array(
        '#type' => 'html_tag',
        '#tag' => 'button',
        '#value' => 'Members',
        '#weight' => 3,
        '#attributes' => array(
          'type' => 'button',
          'value' => 'Members',
          'id' => 'show-members',
          'class' => array('button', 'show-members'),
        ),
        '#attached' => array(
          'js' => array('sites/all/modules/squawk/scripts/show-members-dialog.js'),
        ),
      );*/
    }
    if($user_is_creator) {
      //add a button to edit channel characteristics.
      $term->content['ajax_links']['edit_action'] = array(
        '#prefix' => '<div id="term-' . $term->tid . '-edit-action" class="edit-action">',
        '#suffix' => '</div>',
        '#theme' => 'link',
        '#text' => t('Edit'),
        '#path' => 'ext/channels/'. $term->tid . '/edit',
        '#options' => array(
        'attributes' => array('class' => array('edit-link'),),
          //REQUIRED:
          'html' => FALSE,
        ),
        '#weight' => 4,
      );
    }
    //format the created by to be the username of the uid in the field
    $term->content['field_created_by'][0]['#markup'] = format_username($account);
    $term->content['field_members']['#printed']=true;
  }
}

//************************************************
//*
//* Implements hook_node_view
//*
//************************************************
function squawk_node_view($node, $view_mode, $langcode) {
  if($node->type == 'update' ) {
    //some features are common to both view modes. This includes the date, the author, the
    //new mark and the archive feature.
    //this operates on $node->content only
    drupal_add_js('misc/ajax.js');
    $viewer_is_recipient = FALSE;
    $recipient = user_load($node->field_recipient['und'][0]['value']);
    $viewer_is_recipient = viewing_own_channel($recipient);
    //set up the 'from' indicator on the stream tab
    if (!empty($node->field_channels)) {
      //dsm('channel exists');
    }
    else {
      //dsm('channel empty');
      //(node->field_private['und'][0]['value'])?dsm('private'):dsm('news');
    }
    //dsm($node);

    //logic to determine whether a node is current or archived; read or unread
    //$archive_path='channels/archive/' . $node->nid . '/nojs/';
    if($node->field_archived['und'][0]['value'] == TRUE) {
      $archived_state = "Archived";
      $archive_action = "Archived";
    }
    else {
      $archived_state = "Current";
      $archive_action = "Current";
    }
    if(node_last_viewed($node->nid) > 0 ) {
      $unread_state = 'Viewed';
    }
    else {
      $unread_state = 'New';
    }
    if ($viewer_is_recipient) {
        $node->content['ajax_links'] = array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array('ajax-links'),
        ),
      '#weight' => 1,
      );
      $node->content['ajax_links']['unread_action'] = array(
        '#prefix' => '<div id="node-' . $node->nid . '-unread-action" class="unread-action">',
        '#suffix' => '</div>',
        '#theme' => 'link',
        '#text' => $unread_state,
        '#path' => 'channels/unread/'. $node->nid . '/nojs/',
        '#options' => array(
        'attributes' => array('class' => array('use-ajax'),),
          //REQUIRED:
          'html' => FALSE,
        ),
        '#weight' => 1,
      );
      $node->content['ajax_links']['archive_action'] = array(
        '#prefix' => '<div id="node-' . $node->nid . '-archive-action" class="archive-action">',
        '#suffix' => '</div>',
        '#theme' => 'link',
        '#text' => $archived_state,
        '#path' => 'channels/archive/' . $node->nid . '/nojs/',
        '#options' => array(
        'attributes' => array('class' => array('use-ajax'),),
          //REQUIRED:
          'html' => FALSE,
        ),
        '#weight' => 2,
      );
      $node->content['ajax_links']['edit_link'] = array(
        '#prefix' => '<div id="node-' . $node->nid . '-edit-link" class="edit-link">',
        '#suffix' => '</div>',
        '#theme' => 'link',
        '#text' => t('Edit'),
        '#path' => 'channels/node/'. $node->nid . '/edit',
        '#options' => array(
        'attributes' => array('class' => array('edit-link'),),
          //REQUIRED:
          'html' => FALSE,
        ),
        '#weight' => 3,
      );
    }
    else {
      $node->content['ajax_links'] = array();
      //$node->content['archive_action'] = array();
      //$node->content['unread_action'] = array();
      //$node->content['edit_link'] = array();
    }
    $node->content['date'] = array(
      '#prefix' => '<div id="date-div">',
      '#suffix' => '</div>',
      '#markup' => format_date($node->changed,'medium'),
      '#weight' => 2,
    );
    $author = user_load($node->uid);
    $node->content['author'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('author'),
        'id' => 'author-div',
      ),
      '#weight' => 1,
    );
    $node->content['author']['name'] = array(
      '#theme' => 'html_tag',
      '#tag' => 'p',
      '#attributes' => array(
        'class' => array('author','author-name'),
      ),
      '#value' => format_username($author),
      '#weight' => 2,
    );

    $node->content['author']['picture'] = array(
      '#theme' => 'user_picture',
      '#account' => $author,
      '#weight' => 1,
    );
    $body_teaser = '';
    $summarized = FALSE;
    if (strlen($node->body['und'][0]['value']) > 255) {
      $summarized = TRUE;
      //$node->content['xbody'] = $node->content['body'];
      $last_t_space = strripos(substr($node->body['und'][0]['value'],0,255),' ');
      $body_teaser = substr($node->body['und'][0]['value'], 0, $last_t_space);
      $node->content['text_summary'] = array(
        '#type' => 'html_tag',
        '#tag' => 'p',
        '#value' => $body_teaser . ' ...',
        '#attributes' => array(
          'id' => 'teaser-' . $node->nid,
        ),
        '#prefix' => '<div id="teaser-div-' . $node->nid . '">',
        '#suffix' => '</div>',
        '#weight' => 3,
      );
      $node->content['body']['#prefix']='<div id="full-body-' . $node->nid . '" style="display:none" class="summary-processed">';
      $node->content['body']['#suffix']='</div>';
      $node->content['body']['#weight'] = 3;
    }
    else {
      $node->content['body']['#prefix']='<div id="full-body-' . $node->nid . '">';
      $node->content['body']['#suffix']='</div>';
      $node->content['body']['#weight'] = 3;
    }
    if ($summarized || count($node->field_previous_author) > 0) {

      //there is more to the message than will be displayed in the teaser

      $node->content['summary-button'] = array(
        '#type' => 'html_tag',
        '#tag' => 'button',
        '#value' => 'Show More',
        '#weight' => 5,
        '#attributes' => array(
          'type' => 'button',
          'checked' => FALSE,
          'value' => 'Show More',
          'id' => 'summary-button-' . $node->nid,
          'class' => array('summary-button', 'show-more'),
        ),
        '#attached' => array(
          //'js' => array('sites/all/modules/squawk/scripts/show-node-content.js'),
        ),
      );
    }
    else {
      $node->content['summary-button'] = array();
    }
    $node->content['field_tags']['#weight'] = 4;

    //dsm($node);
    //Right now if there are edit/forwards to the update they all stack within their
    //respective fields. Need to group them together by index, similar to how they are grouped
    //on the update form itself.
    //each update is in $node->content['field']['#items'] which is an array having
    //['value'],['format'], and ['safe_value'] keys. Looks like safe value has markup and
    //value is the raw field contents.
    //
    //So. Find the cardinality of the previous updates and then use that to step through the values and group them in reverse chronological order.
    //$cardin_ality = 0;
    $cardinality = 0;
    if(isset($node->content['field_previous_author']['#items'])) {
      $cardin_ality = count($node->content['field_previous_author']['#items']);
    }
    else {
      $cardin_ality = 0;
    }
    /*for ($i = 1; $i <= 100; $i++) {
      if(!isset($node->content['field_previous_author']['#items'][$i])) {
        //dsm($cardinality);
        break;
      }
      else {
        $cardinality = $i;
      }
    }*/
    $weight_index = 6;
    $node->content['original_content'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('summary-processed'),
        'id' => 'original-content-' . $node->nid,
        'style' => 'display:none',
      ),
      '#weight' => $weight_index,
    );
    if ($cardin_ality > 0) {
      for ($n = $cardin_ality - 1; $n >= 0; $n--) {
        $node->content['original_content'][$n]['details'] = array(
          '#prefix' => '<div class="previous-content previous-update-' . $n . '">',
          '#weight' => $weight_index,
          '#suffix' => '</div>',
        );
        $node->content['original_content'][$n]['details']['title'] = array(
          '#markup' => '<h3 class="previous-content-title">' . $node->field_previous_title['und'][$n]['value'] . '</h3>',
          '#weight' => 1,
        );
        $node->content['original_content'][$n]['details']['author'] = array(
          '#markup' => '<div class="previous-author"><label>From: </label>' . $node->content['field_previous_author']['#items'][$n]['value'] . '</div>',
          '#weight' => 2,
        );
        $node->content['original_content'][$n]['details']['content'] = array(
          //'#type' => 'item',
          //'#markup' => '<p class="previous-content-body">' . $form['field_previous_content']['und'][$n]['value']['#default_value'] . //'</p>',
          '#markup' => '<p class="previous-content-body">' . $node->content['field_previous_content']['#items'][$n]['value'] . '</p>',
          '#weight' => 3,
          );
        $node->content['original_content'][$n]['details']['tags'] = array(
          //'#markup' => '<div class="previous-content-tags"><label>Tagged As: </label>' . $node->content['field_previous_tags']['#items'][$n]['value'] . '</div>',
          '#prefix' => '<div class="previous-content-tags"><label>Tagged As: </label>',
          '#suffix' => '</div>',
          '#theme' => 'item_list',
          '#type' => 'ul',
          '#items' => explode(',',$node->content['field_previous_tags']['#items'][$n]['value']),
          '#weight' => 4,
        );
        ++$weight_index;
      }
    }
    //Now mark all the default fields as already printed so the stuff doesn't show up twice.
    $node->content['field_previous_author']['#printed']=TRUE;
    $node->content['field_previous_content']['#printed']=TRUE;
    $node->content['field_previous_title']['#printed']=TRUE;
    $node->content['field_previous_tags']['#printed']=TRUE;
    $node->content['field_archived']['#printed']=TRUE;
    //dsm($node->content);
  }
}
//************************************************
//*
//* Implements hook_mail
//*
//************************************************
function squawk_mail($key, &$message, $params) {
  if (isset($params['subject'])) {
    $message['subject'] = $params['subject'];
  }
  if (isset($params['body'])) {
    $message['body'][] = $params['body'];
  }
  if (isset($params['headers']) && is_array($params['headers'])) {
    $message['headers'] += $params['headers'];
  }
  $account = $params['account'];
  switch($key) {
  case 'update':
    $message['subject'] = t('There is new content waiting for you at Squawk!');
    $message['body'][] = t('Dear @recipient, There is new stuff to see since the last time you checked in. To see it and join the discussion, visit squawk.sa.arizona.edu soon!',
      array('@recipient' => format_username($account)));
  break;
  case 'channel':
    $message['subject'] = t('You have been added to a new discussion channel on Squawk!');
  break;
  case 'relationship':
  break;
  case 'stale':
  break;
  dsm($message['result']);
  }
}



/*
 *
 * Taxonomy Term Page
 *
 */

 function squawk_channel_page($term) {
  //drupal_set_message('coming soon', 'status');
  drupal_set_title('');
  drupal_add_js('sites/all/modules/squawk/scripts/show-members-dialog.js');
  drupal_add_js('sites/all/modules/squawk/scripts/show-node-content.js');
  global $user;
  $user_is_creator = FALSE;
  $account = user_load($term->field_created_by['und'][0]['value']);
  if($user->uid == $account->uid) {
    $user_is_creator = TRUE;
  }
  //here is where the term is shown. Add the buttons, the file management dialog, and the
  //member management dialog stuff here. Also mention what kind of a channel it is.
  $build['destination_title_area'] = array(
    '#type' => 'container',
          '#attributes' => array(
            'class' => array('container-picture-title',),
    ),
    '#weight' => 0,
  );
  //here it isn't picking up the default. 22xx
  $build['destination_title_area']['graphic'] = array(
    '#type' => 'item',
    '#theme' => 'image_style',
    '#style_name' => 'thumbnail',
    '#path' => $term->field_graphic['und'][0]['uri'],
    '#prefix' => '<div id="graphic-wrapper" class="picture user-picture channel-graphic">',
    '#suffix' => '</div>',
    '#alt' => $term->name . ' Channel Image',
    //'#title' => $term->name . ' Channel Image',
    '#weight' => 1,
  );
  $build['destination_title_area']['title']=array(
    '#markup' => '<h1>' . $term->name . '</h1>',
    '#prefix' => '<div class="channel-name" >',
    '#suffix' => '</div>',
    '#weight' => 2,
  );
  $build['destination_title_area']['description']=array(
    '#markup' => '<p class="channel-description">' . $term->description . '</p>',
    '#prefix' => '<div class="channel-description" >',
    '#suffix' => '</div>',
    '#weight' => 3,
  );
  $build['destination_title_area']['creator']=array(
    '#markup' => '<p class="channel-creator">Created by: ' . format_username($account) . '</p>',
    '#prefix' => '<div class="channel-creator" >',
    '#suffix' => '</div>',
    '#weight' => 4,
  );
  if($user_is_creator) {
  //add a button to edit channel characteristics.
  $build['destination_title_area']['edit_action'] = array(
    '#prefix' => '<div id="term-' . $term->tid . '-edit-action" class="edit-action">',
    '#suffix' => '</div>',
    '#theme' => 'link',
    '#text' => t('Edit'),
    '#path' => 'ext/channels/'. $term->tid . '/edit',
    '#options' => array(
    'attributes' => array('class' => array('edit-link'),),
      //REQUIRED:
      'html' => FALSE,
    ),
    '#weight' => 5,
  );
}


  if($term->field_type['und'][0]['value'] != 'broadcast') {
    $items=array(array('data'=> 'None'));
    if (isset($term->field_members['und'])) {
      for($i=0;$i<count($term->field_members['und']); $i++) {
        $items[$i]['data']=$term->field_members['und'][$i]['value'];
      }
    }
    $build['members_dialog'] = array(
      '#prefix' => '<div id="members-dialog" title="' . $term->name . ' Channel Members">',
      '#theme' =>'item_list',
      '#type' => 'ul',
      '#items' => $items,
      '#suffix' => '</div>',
    );
    /*$build['destination_title_area']['members_button'] = array(
      '#type' => 'html_tag',
      '#tag' => 'button',
      '#value' => 'Members',
      '#weight' => 0,
      '#attributes' => array(
        'type' => 'button',
        'value' => 'Members',
        'id' => 'show-members',
        'class' => array('button', 'show-members'),
      ),
      '#attached' => array(
        'js' => array('sites/all/modules/squawk/scripts/show-members-dialog.js'),
      ),
    );*/
  }
  // $build['term_heading'] = array(
    // '#prefix' => '<div class="term-listing-heading">',
    // '#suffix' => '</div>',
    // 'term' => taxonomy_term_view($term, 'full'),
  ///);
  //the last and missing parm in taxonomy_select_nodes is the order by array.
  //of the taxonomy index table...dunno what the field options are yet.
  if ($nids = taxonomy_select_nodes($term->tid, FALSE, FALSE )) {
    $nodes = node_load_multiple($nids);
  //this is the part I changed. Plus some of the header junk I didn't get.
    $build['tagged_content'] = node_view_multiple($nodes, 'full');
  $build['tagged_content']['#weight'] = 5;
  $build['tagged_content']['#prefix'] = '<div id="squawk-updates-container" class="tagged-content">';
  $build['tagged_content']['#suffix'] = '</div>';
//    $build['pager'] = array(
//      '#theme' => 'pager',
 //     '#weight' => 5,
 //   );
  }
  else {
    $build['no_content'] = array(
      '#prefix' => '<p>',
      '#markup' => t('There is currently no content classified with this term.'),
      '#suffix' => '</p>',
    );
  }
  //update the channel history for this user
  update_channel_history($term->tid);
  return $build;
}
function channel_edit_access($term) {
  global $user;
  if ($user->uid == $term->field_created_by['und'][0]['value']) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

function squawk_relationship_exists($target, $requester = NULL) {
  //$target is a loaded user account
  //returns true if the requester has any of the three defined relationships (peer, report, lead) with the target.
  if(is_null($requester)) {
    global $user;
    $requester = $user;
  }
  //check for reflexive
  if($target->uid == $requester->uid) {
    return true;
  }
  $set = squawk_relationships($target->uid,'reports','link')
    + squawk_relationships($target->uid,'peers','link')
    + squawk_relationships($target->uid,'leads','link');
  foreach($set as $key=>$value) {
    if ($requester->uid == $key) {
      return true;
    }
  }
  return false;
}
function update_channel_history($tid, $uid = NULL) {
  //update when the user given (defaults to the current user) last navigated to the channel given.
  //store the result in the channel history table. Overwite the row if it exists, add it if it does not.
  if(is_null($uid)) {
    global $user;
    $uid = $user->uid;
  }
  $query = db_query("SELECT timestamp FROM {channel_history} WHERE uid = :uid AND tid = :tid",
    array(':uid' => $uid, ':tid' => $tid)) -> fetchObject();
  if(!empty($query)) {
    //the row exists so update it.
    $fields = array('timestamp' => REQUEST_TIME);
    db_update('channel_history')
      ->fields($fields)
      ->condition('uid', $uid, '=')
      ->condition('tid', $tid, '=')
      ->execute();
  }
  else {
    //add it
    $fields = array('tid' => $tid, 'uid' => $uid, 'timestamp' => REQUEST_TIME);
    db_insert('channel_history')->fields($fields)->execute();
}
  return TRUE;
}
function fetch_channel_history($tid, $uid = NULL) {
  //fetch when the user given (defaults to the current user) last navigated to the channel given stored
  //in the channel history table. Return zero if that hasn't ever happened.
  if(is_null($uid)) {
    global $user;
    $uid = $user->uid;
  }
  $result = 0;
  $query = db_query("SELECT timestamp FROM {channel_history} WHERE uid = :uid AND tid = :tid",
    array(':uid' => $uid, ':tid' => $tid)) -> fetchObject();
    //dsm($query->timestamp);
  if(!empty($query)) {
    $result = $query->timestamp;
  }
  return $result;
}
function fetch_new_channel_content($tid, $timestamp) {
  $result = array();
  $query = db_query("SELECT nid FROM {taxonomy_index} WHERE tid = :tid AND created > :timestamp",
    array(':tid' => $tid, ':timestamp' => $timestamp)) -> fetchAll();
  if(!empty($query)) {
    //dsm($query);
    foreach($query as $row) {
      $result[] = $row->nid;
    }
  }
  return $result;
}
function extract_mentions($text) {
  //extract the netids from the $text
  $mentions = array();
  $netids = array();
  $p = "/@([A-Za-z0-9_]+)/";
  preg_match_all($p, $text, $netids);
  //if there are some, then load the tids from an efq within the mentions vocabulary.
  if (!empty($netids[1])) {
    //dsm('got some hits');
    $vocabularies = taxonomy_vocabulary_get_names();
    $query= new EntityFieldQuery;
    $result = $query
      ->entityCondition('entity_type', 'taxonomy_term')
      ->propertyCondition('vid', $vocabularies['mentions']->vid)
      ->propertyCondition('name', $netids[1], 'IN')
      ->execute();
    //dsm($result);
    if(!empty($result['taxonomy_term'])) {
      //these are the known users of Squawk at this moment
      //transform these into an array of tids for saving into the nodes
      //field_mentions
      //the form is
      //field_mentions['und'][tid]['tid'][tid];
      $tids = array_keys($result['taxonomy_term']);
      foreach($tids as $tid) {
        $mentions[] = array('tid' => $tid);
      }
    }
  }
  return $mentions;
}
/*
 *
 */
function squawk_query_ldap($depts = array()) {
  $result = array();
  // setup LDAP parameters
  $ldapUrl = "ldaps://eds.arizona.edu";
  $ldapPort = 636;
  $bindDn = "uid=sasg-drupal,ou=App Users,dc=eds,dc=arizona,dc=edu";
  $bindPw = "Jm2GvdiyeSQKB7UL8zeAjmW59Hdz2yAP";
  $searchBase = "ou=People,dc=eds,dc=arizona,dc=edu";
  //$searchFilter = "(|(uid=bourgeot)(uid=dbthomps))";
  $deptStr ='(|';
  foreach($depts as $dept) {
    $deptStr .= '(employeePrimaryDept=' . $dept . ')';
  }
  $deptStr .= ')';

  $parms['filter'] = '(&(employeeStatus=A)(!(uaid=T*))' . $deptStr . ')';
  //$parms['attrs'] = array('uid','cn','sn','mail','givenName','eduPersonPrimaryAffiliation','dateOfBirth','');
  $parms['attrs'] = array(
    'placeholder',
    //'cn',
    //'sn',
    //'givenName',
    //'eduPersonPrimaryAffiliation',
    'uid',
    //'mail',
    //'dateOfBirth',
    //'employeeBldgNum',
    //'employeeBldgName',
    //'employeeIsFerpaTrained',
    //'employeeOfficialOrg',
    //'employeePhone',
    //'employeePrimaryDept',
    //'employeePrimaryTitle',
    //'employeeStatus',
    //'eduPersonAffiliation'
  );// mult

  // establish LDAP connection
  $ldap = ldap_connect($ldapUrl,$ldapPort);
  if (! $ldap) {
    error_log("Could not connect to LDAP server");
  }
  // bind as app user
  if (! ldap_bind($ldap, $bindDn, $bindPw)) {
    error_log(ldap_error($ldap));
  }
  // retrieve entry
  $i=0;
  $sr = ldap_search($ldap, $searchBase, $parms['filter'], $parms['attrs']);
  $e=ldap_get_entries($ldap,$sr);
  $entry = ldap_first_entry($ldap, $sr);
  while ($entry) {
    $vals = ldap_get_values($ldap, $entry, "uid");
    //$attrs = ldap_get_attributes($ldap, $entry);
    dsm($vals);
    //dsm($attrs);
    //$result[] = $attrs;
    $i++;
    $result[]=$vals[0];
    $entry = ldap_next_entry($ldap, $entry);
  }
  // examine values
  ldap_close($ldap);
  //dsm($result);
  return $result;
}
function squawk_fetch_ua_orgs($url = '') {
  if ($url == '') {
    //get them all
    $url = 'https://siaapps.uits.arizona.edu/home/orgs/ua_orgs/index.json';
  }
  $result = array();
  $objs = array();
  $root = new stdClass();
  $f = file_get_contents($url);
  if( $f !== FALSE ) {
    $objs = json_decode($f);
  }
  return $objs;

}
function directory() {
  drupal_set_title('Employee Directory');
  $page = array();
  $objs = _fetch_ua_orgs();
  //result has a bunch of objects in it. Transform the data to an array where each
  //entry is indexed by its dept id and is itself an array.
  if(!empty($objs)) {
    //open an ldap connection
    // setup LDAP parameters
    $ldapUrl = "ldaps://eds.arizona.edu";
    $ldapPort = 636;
    $bindDn = "uid=sasg-drupal,ou=App Users,dc=eds,dc=arizona,dc=edu";
    $bindPw = "Jm2GvdiyeSQKB7UL8zeAjmW59Hdz2yAP";
    $searchBase = "ou=People,dc=eds,dc=arizona,dc=edu";
    $ldap = ldap_connect($ldapUrl,$ldapPort);

    if (! $ldap) {
      error_log("Could not connect to LDAP server");
    }
    // bind as app user
    if (! ldap_bind($ldap, $bindDn, $bindPw)) {
      error_log(ldap_error($ldap));
    }
    //$attrs = array('placeholder','uid','cn', );
    $attrs = array(
      //'placeholder',
      'cn',
      //'sn',
      //'givenName',
      'eduPersonPrimaryAffiliation',
      'uid',
      //'mail',
      'dateOfBirth',
      //'employeeBldgNum',
      'employeeBldgName',
      //'employeeIsFerpaTrained',
      //'employeeOfficialOrg',
      'employeePhone',
      //'employeePrimaryDept',
      //'employeePrimaryTitle',
      //'employeeStatus',
      //'eduPersonAffiliation'
    );

    $orgs = array();
//    foreach($objs as $obj) {
    do {
      $obj = array_pop($objs);
      //set the org return objects
      $o = new stdClass();
      $o->id = $obj->UaOrg->id;
      $o->name = $obj->UaOrg->name;
      $o->parent_id = $obj->UaOrg->parent_id;
      $o->parent = array();
      $o->children = array();
      $o->staff = array();
      //fetch the staff
      $filter='(&(employeeStatus=A)(!(objectclass=arizonaedutestperson))(employeePrimaryDept=' . $obj->UaOrg->id . '))';
      $sr = ldap_search($ldap, $searchBase, $filter, $attrs);
      $entry=ldap_first_entry($ldap,$sr);
      $dr=array();
      while ($entry) {
        $p = new stdClass();
        //setup nulls
        $p->name = '';
        $p->first_name = '';
        $p->last_name = '';
        $p->dob ='';
        $p->building = '';
        $p->phone = '';
        $p->title = '';
        $p->employee_type = '';
        $p->netid = '';
        $found = ldap_get_attributes($ldap, $entry);
        for ($i=0; $i < $found['count']; $i++) {
          //$dr[]=$found[$i] . ': ' . $found[$found[$i]][0];
          $p->$found[$i] = $found[$found[$i]][0];
        }
        $dr[]=$p;
        $entry = ldap_next_entry($ldap, $entry);
      }
      $o->staff = $dr;
      if (count($dr) > 0) {
        $page[] = array(
          '#prefix' => '<p>',
          '#suffix' => '</p>',
          '#type' => 'item',
          '#title' => $obj->UaOrg->name . ' (' . $obj->UaOrg->id . ')' ,
          //'#markup' => implode('</br>', $dr),
          'staff' => array(
            '#title' => 'Staff',
            '#type' => 'item',
            '#markup' => count($dr),
          ),
        );
      }
      //do any more things to $o. For now, nothing.

      $orgs[] = $o;
      unset($obj, $o, $dr, $p, $sr, $entry);
      dsm(memory_get_usage());
    } while (count($objs) > 0);
    //save memory
    unset($objs);
    ldap_close($ldap);
    dsm(memory_get_usage());
  }
  //$page = drupal_json_encode($object);
  return $page;
}
function directory_two() {
  drupal_set_title('Employee Directory');
  $page = array();
  $objs = _fetch_ua_orgs();
  //result has a bunch of objects in it. Transform the data to an array where each
  //entry is indexed by its dept id and is itself an array.
  if(!empty($objs)) {
    $orgs = array();
//    foreach($objs as $obj) {
    do {
      $obj = array_pop($objs);
      //set the org return objects and turn them into arrays to solve my awful memory problems.
      $o['id'] = $obj->UaOrg->id;
      $o['name'] = $obj->UaOrg->name;
      $o['parent_id'] = $obj->UaOrg->parent_id;
      $o['staff'] = array();
      $orgs[] = $o;
      /*
      $o = new stdClass();
      $o->id = $obj->UaOrg->id;
      $o->name = $obj->UaOrg->name;
      $o->parent_id = $obj->UaOrg->parent_id;
      $o->parent = array();
      $o->children = array();
      $o->staff = array();
      $orgs[] = $o;
      */
      unset($obj, $o);
    } while (count($objs) > 0);
    //dsm(memory_get_usage());
    //now take the rebuilt orgs and add the staff
    //open an ldap connection
    // setup LDAP parameters
    $ldapUrl = "ldaps://eds.arizona.edu";
    $ldapPort = 636;
    $bindDn = "uid=sasg-drupal,ou=App Users,dc=eds,dc=arizona,dc=edu";
    $bindPw = "Jm2GvdiyeSQKB7UL8zeAjmW59Hdz2yAP";
    $searchBase = "ou=People,dc=eds,dc=arizona,dc=edu";
    $ldap = ldap_connect($ldapUrl,$ldapPort);

    if (! $ldap) {
      error_log("Could not connect to LDAP server");
    }
    // bind as app user
    if (! ldap_bind($ldap, $bindDn, $bindPw)) {
      error_log(ldap_error($ldap));
    }
    //$attrs = array('placeholder','uid','cn', );
    $attrs = array(
      //'placeholder',
      'cn',
      'sn',
      'givenName',
      'eduPersonPrimaryAffiliation',
      'uid',
      'mail',
      'dateOfBirth',
      'employeeBldgNum',
      'employeeBldgName',
      //'employeeIsFerpaTrained',
      //'employeeOfficialOrg',
      'employeePhone',
      //'employeePrimaryDept',
      'employeePrimaryTitle',
      //'employeeStatus',
      //'eduPersonAffiliation'
    );
    //foreach($orgs as $org) {
    foreach($orgs as $key=>$org) {
      //fetch the staff
      //$filter='(&(employeeStatus=A)(!(objectclass=arizonaedutestperson))(employeePrimaryDept=' . $org->id . '))';
      $filter='(&(employeeStatus=A)(!(objectclass=arizonaedutestperson))(employeePrimaryDept=' . $org['id'] . '))';
      $sr = ldap_search($ldap, $searchBase, $filter, $attrs);
      $entry=ldap_first_entry($ldap,$sr);
      $dr=array();
      while ($entry) {
        /*
        $p = new stdClass();
        //setup nulls
        //$p->name = '';
        $p->first_name = '';
        $p->last_name = '';
        //$p->dob ='';
        $p->building = '';
        $p->phone = '';
        $p->title = '';
        $p->employee_type = '';
        //$p->netid = '';
        $found = ldap_get_attributes($ldap, $entry);
        for ($i=0; $i < $found['count']; $i++) {
          //$dr[]=$found[$i] . ': ' . $found[$found[$i]][0];
          $p->$found[$i] = $found[$found[$i]][0];
        }
        $dr[]=$p;
        */
        $found = ldap_get_attributes($ldap, $entry);
        for ($i=0; $i < $found['count']; $i++) {
          //$dr[]=$found[$i] . ': ' . $found[$found[$i]][0];
          $p[strtolower($found[$i])] = $found[$found[$i]][0];
        }
        $dr[]=$p;
        $entry = ldap_next_entry($ldap, $entry);
      }
      //$org->staff = $dr;
      $orgs[$key]['staff'] = $dr;
      //do any more things to $o. For now, nothing.
      unset($dr, $p, $sr, $entry);
    }
    //save memory
    ldap_close($ldap);
    unset($objs, $ldap);
    dsm(memory_get_usage());
    //now build the page
    foreach($orgs as $org) {
      //
      //if ($org['id']=='8107') { dsm($org); }
      //
      /*if(count($org->staff) > 0) {
        $page[$org->id] = array(
          '#prefix' => '<p>',
          '#suffix' => '</p>',
          '#type' => 'item',
          '#title' => $org->name . ' (' . $org->id . ')' ,
          //'#markup' => implode('</br>', $dr),
          'staff' => array(
            '#title' => 'Staff',
            '#type' => 'item',
            '#markup' => '<p>' . count($org->staff) .'</p>',
          ),
        );
      }*/
      if(count($org['staff']) > 0) {
      //
      if ($org['id']=='8107') { $page[] = array('#markup' => drupal_json_encode($org)); }
      //
        $page[$org['id']] = array(
          '#prefix' => '<p>',
          '#suffix' => '</p>',
          '#type' => 'item',
          '#title' => $org['name'] . ' (' . $org['id'] . ')' ,
          //'#markup' => implode('</br>', $dr),
          'count' => array(
            '#title' => 'Staff',
            '#type' => 'item',
            '#markup' => '<p>' . count($org['staff']) .'</p>',

          ),
        );
      }
    }
  }
  drupal_set_message(memory_get_usage());
  //$page = drupal_json_encode($object);
  drupal_add_js('http://d3js.org/d3.v3.min.js','external');
  drupal_add_js('jQuery(document).ready(function () { d3.selectAll("p").style("color", "blue"); });', 'inline');
  $page['extra']=array(
    '#type' => 'container',
    '#attributes' => array(
      'id' => 'd3-div',
    ),

  );
  return $page;
}
